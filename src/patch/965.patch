--- a/com/yogpc/ip/ItemArmorElectric.java
+++ b/com/yogpc/ip/ItemArmorElectric.java
@@ -3,7 +3,6 @@
 import ic2.api.item.ElectricItem;
 import ic2.api.item.IElectricItem;
 
-import java.lang.reflect.Field;
 import java.util.List;
 
 import net.minecraft.creativetab.CreativeTabs;
@@ -11,11 +10,9 @@
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.entity.player.EntityPlayerMP;
 import net.minecraft.item.EnumRarity;
-import net.minecraft.item.Item;
 import net.minecraft.item.ItemArmor;
 import net.minecraft.item.ItemStack;
 import net.minecraft.nbt.NBTTagCompound;
-import net.minecraft.network.NetHandlerPlayServer;
 import net.minecraft.util.DamageSource;
 import net.minecraft.world.World;
 import net.minecraftforge.common.ISpecialArmor;
@@ -23,7 +20,6 @@
 import cofh.api.energy.IEnergyContainerItem;
 
 import com.yogpc.mc_lib.ProxyCommon;
-import com.yogpc.mc_lib.ReflectionHelper;
 import com.yogpc.mc_lib.YogpstopLib;
 
 import cpw.mods.fml.common.FMLCommonHandler;
@@ -33,8 +29,8 @@
 
 public class ItemArmorElectric extends ItemArmor implements ISpecialArmor, IElectricItem,
     IEnergyContainerItem {
-  public ItemArmorElectric() {
-    super(EnumHelper.addArmorMaterial("ELECTRIC", 33, new int[] {3, 8, 6, 3}, 0), YogpstopLib.proxy
+  public ItemArmorElectric(final int id) {
+    super(id, EnumHelper.addArmorMaterial("ELECTRIC", 33, new int[] {3, 8, 6, 3}, 0), YogpstopLib.proxy
         .addNewArmourRendererPrefix("electric"), 1);
     setUnlocalizedName("electric_armor");
     setCreativeTab(CreativeTabs.tabCombat);
@@ -44,9 +40,6 @@
     setMaxStackSize(1);
   }
 
-  private static final Field f = ReflectionHelper.getField(NetHandlerPlayServer.class,
-      "field_147365_f", "floatingTickCount");
-
   private static final double maxFallSpeedOnHover = 0.35;
 
   private void useJetpack(final EntityPlayer p, final ItemStack jetpack, final boolean hover) {
@@ -84,13 +77,7 @@
         p.fallDistance = 0.0f;
         p.distanceWalkedModified = 0.0f;
         if (p instanceof EntityPlayerMP)
-          try {
-            f.setInt(((EntityPlayerMP) p).playerNetServerHandler, 0);
-          } catch (final IllegalArgumentException e) {
-            e.printStackTrace();
-          } catch (final IllegalAccessException e) {
-            e.printStackTrace();
-          }
+          ((EntityPlayerMP) p).playerNetServerHandler.ticksForFloatKick = 0;
       }
       p.inventoryContainer.detectAndSendChanges();
     }
@@ -122,7 +109,7 @@
   }
 
   @Override
-  public void onArmorTick(final World world, final EntityPlayer player, final ItemStack itemStack) {
+  public void onArmorTickUpdate(final World world, final EntityPlayer player, final ItemStack itemStack) {
     if (player.inventory.armorInventory[2] != itemStack)
       return;
     useJetpack(player, itemStack, toggleHover(player, itemStack));
@@ -172,13 +159,13 @@
   }
 
   @Override
-  public Item getChargedItem(final ItemStack itemStack) {
-    return this;
+  public int getChargedItemId(final ItemStack itemStack) {
+    return this.itemID;
   }
 
   @Override
-  public Item getEmptyItem(final ItemStack itemStack) {
-    return this;
+  public int getEmptyItemId(final ItemStack itemStack) {
+    return this.itemID;
   }
 
   @Override
--- a/com/yogpc/mc_lib/APacketTile.java
+++ b/com/yogpc/mc_lib/APacketTile.java
@@ -24,9 +24,6 @@
 
   @Override
   public final Packet getDescriptionPacket() {
-    final ByteBuf buf = Unpooled.buffer();
-    buf.writeByte(0);
-    new YogpstopPacket(this).writeData(buf);
-    return new FMLProxyPacket(buf, "YogpstopLib");
+    return PacketHandler.getPacket(new YogpstopPacket(this));
   }
 }
--- a/com/yogpc/mc_lib/APowerTile.java
+++ b/com/yogpc/mc_lib/APowerTile.java
@@ -20,7 +20,7 @@
   public void updateEntity() {
     super.updateEntity();
     final double rem = Math.min(this.maxGot - this.got, this.max - this.all - this.got);
-    this.got += this.pp.useEnergy(0, rem, true);
+    this.got += this.pp.useEnergy(0, (float) rem, true);
     this.all += this.got;
     this.got = 0;
   }
@@ -44,7 +44,7 @@
     this.all = nbttc.getDouble("storedEnergy");
     this.max = nbttc.getDouble("MAX_stored");
     this.maxGot = nbttc.getDouble("MAX_receive");
-    this.pp.configure(0, this.maxGot, 0, this.max);
+    this.pp.configure(0, (float) this.maxGot, 0, (float) this.max);
   }
 
   @Override
@@ -88,7 +88,7 @@
   public final void configure(final double x, final double maxstored) {
     this.maxGot = x;
     this.max = maxstored;
-    this.pp.configure(0, this.maxGot, 0, this.max);
+    this.pp.configure(0, (float) this.maxGot, 0, (float) this.max);
   }
 
   @Override
--- a/com/yogpc/mc_lib/BlockWorkbench.java
+++ b/com/yogpc/mc_lib/BlockWorkbench.java
@@ -2,7 +2,6 @@
 
 import java.util.Random;
 
-import net.minecraft.block.Block;
 import net.minecraft.block.BlockContainer;
 import net.minecraft.block.material.Material;
 import net.minecraft.creativetab.CreativeTabs;
@@ -16,8 +15,8 @@
 public class BlockWorkbench extends BlockContainer {
   private final Random random = new Random();
 
-  protected BlockWorkbench() {
-    super(Material.iron);
+  protected BlockWorkbench(int id) {
+    super(id, Material.iron);
     setHardness(3F);
     setCreativeTab(CreativeTabs.tabRedstone);
     setUnlocalizedName("WorkbenchPlus");
--- a/com/yogpc/mc_lib/PacketHandler.java
+++ b/com/yogpc/mc_lib/PacketHandler.java
@@ -22,7 +22,6 @@
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 import java.lang.reflect.Method;
-import java.util.EnumMap;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
@@ -31,19 +30,18 @@
 import net.minecraft.inventory.Container;
 import net.minecraft.nbt.CompressedStreamTools;
 import net.minecraft.nbt.NBTTagCompound;
+import net.minecraft.network.INetworkManager;
+import net.minecraft.network.packet.Packet250CustomPayload;
 import net.minecraft.tileentity.TileEntity;
 
 import com.google.common.io.ByteArrayDataInput;
 import com.google.common.io.ByteStreams;
 
-import cpw.mods.fml.common.network.FMLEmbeddedChannel;
-import cpw.mods.fml.common.network.FMLOutboundHandler;
-import cpw.mods.fml.common.network.FMLOutboundHandler.OutboundTarget;
-import cpw.mods.fml.common.network.NetworkRegistry;
-import cpw.mods.fml.relauncher.Side;
+import cpw.mods.fml.common.network.IPacketHandler;
+import cpw.mods.fml.common.network.PacketDispatcher;
+import cpw.mods.fml.common.network.Player;
 
-@Sharable
-public class PacketHandler extends SimpleChannelInboundHandler<YogpstopPacket> {
+public class PacketHandler implements IPacketHandler {
   @Retention(RetentionPolicy.RUNTIME)
   @Target(ElementType.METHOD)
   public static @interface Handler {
@@ -57,7 +55,6 @@
       registeredStaticHandlers.put(c.getName(), l.get(0));
   }
 
-  public static EnumMap<Side, FMLEmbeddedChannel> channels;
   static final byte Tile = 0;
   static final byte NBT = 1;
   static final byte BTN = 2;
@@ -94,8 +91,9 @@
   public static final byte remove_laser = 1;
 
   @Override
-  protected void channelRead0(final ChannelHandlerContext ctx, final YogpstopPacket packet)
-      throws Exception {
+  public void onPacketData(final INetworkManager network, final Packet250CustomPayload _packet, final Player player) {
+    final YogpstopPacket packet = new YogpstopPacket();
+    packet.readData(_packet.data, player);
     if (packet.getChannel() == NBT)
       setNBTFromPacket(packet);
     else if (packet.getChannel() == BTN) {
@@ -125,33 +123,29 @@
           | packet.getData()[1] << 16 | packet.getData()[2] << 8 | packet.getData()[3]);
   }
 
+  public static Packet250CustomPayload getPacket(final YogpstopPacket p) {
+    final Packet250CustomPayload pkt = new Packet250CustomPayload();
+    pkt.channel = "YogpstopLib";
+    pkt.data = p.writeData();
+    pkt.length = pkt.data.length;
+    return pkt;
+  }
+
   public static void sendPacketToServer(final YogpstopPacket p) {
-    channels.get(Side.CLIENT).attr(FMLOutboundHandler.FML_MESSAGETARGET)
-        .set(OutboundTarget.TOSERVER);
-    channels.get(Side.CLIENT).writeOutbound(p);
+    PacketDispatcher.sendPacketToServer(getPacket(p));
   }
 
   public static void sendPacketToAround(final YogpstopPacket p, final int d, final int x,
       final int y, final int z) {
-    channels.get(Side.SERVER).attr(FMLOutboundHandler.FML_MESSAGETARGET)
-        .set(OutboundTarget.ALLAROUNDPOINT);
-    channels.get(Side.SERVER).attr(FMLOutboundHandler.FML_MESSAGETARGETARGS)
-        .set(new NetworkRegistry.TargetPoint(d, x, y, z, 256));
-    channels.get(Side.SERVER).writeOutbound(p);
+    PacketDispatcher.sendPacketToAllAround(x, y, z, 256, d, getPacket(p));
   }
 
   public static void sendPacketToDimension(final YogpstopPacket p, final int d) {
-    channels.get(Side.SERVER).attr(FMLOutboundHandler.FML_MESSAGETARGET)
-        .set(OutboundTarget.DIMENSION);
-    channels.get(Side.SERVER).attr(FMLOutboundHandler.FML_MESSAGETARGETARGS).set(new Integer(d));
-    channels.get(Side.SERVER).writeOutbound(p);
+    PacketDispatcher.sendPacketToAllInDimension(getPacket(p), d);
   }
 
   public static void sendPacketToPlayer(final YogpstopPacket p, final EntityPlayer e) {
-    channels.get(Side.SERVER).attr(FMLOutboundHandler.FML_MESSAGETARGET)
-        .set(FMLOutboundHandler.OutboundTarget.PLAYER);
-    channels.get(Side.SERVER).attr(FMLOutboundHandler.FML_MESSAGETARGETARGS).set(e);
-    channels.get(Side.SERVER).writeOutbound(p);
+    PacketDispatcher.sendPacketToPlayer(getPacket(p), (Player) e);
   }
 
   private static void setNBTFromPacket(final YogpstopPacket p) {
--- a/com/yogpc/mc_lib/ProxyClient.java
+++ b/com/yogpc/mc_lib/ProxyClient.java
@@ -1,43 +1,62 @@
 package com.yogpc.mc_lib;
 
+import java.util.ArrayList;
+import java.util.EnumSet;
+import java.util.List;
+
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.gui.GuiScreen;
 import net.minecraft.client.multiplayer.WorldClient;
 import net.minecraft.client.settings.GameSettings;
 import net.minecraft.client.settings.KeyBinding;
 import net.minecraft.entity.Entity;
-import net.minecraft.entity.player.EntityPlayer;
-import net.minecraft.network.INetHandler;
-import net.minecraft.network.NetHandlerPlayServer;
 import net.minecraft.world.World;
-import cpw.mods.fml.client.registry.ClientRegistry;
 import cpw.mods.fml.client.registry.RenderingRegistry;
-import cpw.mods.fml.common.FMLCommonHandler;
-import net.minecraftforge.event.ForgeSubscribe;
-import cpw.mods.fml.common.gameevent.TickEvent;
+import cpw.mods.fml.common.ITickHandler;
+import cpw.mods.fml.common.TickType;
+import cpw.mods.fml.common.registry.TickRegistry;
 import cpw.mods.fml.relauncher.Side;
 import cpw.mods.fml.relauncher.SideOnly;
 
 @SideOnly(Side.CLIENT)
-public class ProxyClient extends ProxyCommon {
+public class ProxyClient extends ProxyCommon implements ITickHandler {
   private int key = 0;
 
   static {
+    final List<KeyBinding> bs = new ArrayList<KeyBinding>();
     for (final Key k : Key.values())
       if (k.name != null) {
-        k.binding = new KeyBinding(k.name, k.id, "YogpstopLib");
-        ClientRegistry.registerKeyBinding((KeyBinding) k.binding);
+        k.binding = new KeyBinding(k.name, k.id);
+        bs.add((KeyBinding) k.binding);
       }
+    final GameSettings set = Minecraft.getMinecraft().gameSettings;
+    final KeyBinding[] add = bs.toArray(new KeyBinding[bs.size()]);
+    final KeyBinding[] all = new KeyBinding[set.keyBindings.length + add.length];
+    System.arraycopy(set.keyBindings, 0, all, 0, set.keyBindings.length);
+    System.arraycopy(add, 0, all, set.keyBindings.length, add.length);
+    set.keyBindings = all;
+    set.loadOptions();
   }
 
   public ProxyClient() {
-    FMLCommonHandler.instance().bus().register(this);
+    TickRegistry.registerTickHandler(this, Side.CLIENT);
   }
 
-  @ForgeSubscribe
-  public void keyUpdate(final TickEvent.ClientTickEvent e) {
-    if (e.phase != TickEvent.Phase.START)
-      return;
+  @Override
+  public String getLabel() {
+    return "YogpstopLib";
+  }
+  
+  @Override
+  public EnumSet<TickType> ticks() {
+    return EnumSet.of(TickType.CLIENT);
+  }
+
+  @Override
+  public void tickEnd(final EnumSet<TickType> type, final Object... data) {}
+
+  @Override
+  public void tickStart(final EnumSet<TickType> type, final Object... data) {
     final int prev = this.key;
     this.key = 0;
     final GuiScreen currentScreen = Minecraft.getMinecraft().currentScreen;
@@ -66,13 +85,6 @@
   }
 
   @Override
-  public EntityPlayer getPacketPlayer(final INetHandler inh) {
-    if (inh instanceof NetHandlerPlayServer)
-      return ((NetHandlerPlayServer) inh).playerEntity;
-    return Minecraft.getMinecraft().thePlayer;
-  }
-
-  @Override
   public int addNewArmourRendererPrefix(final String s) {
     return RenderingRegistry.addNewArmourRendererPrefix(s);
   }
--- a/com/yogpc/mc_lib/ProxyCommon.java
+++ b/com/yogpc/mc_lib/ProxyCommon.java
@@ -5,8 +5,6 @@
 
 import net.minecraft.entity.Entity;
 import net.minecraft.entity.player.EntityPlayer;
-import net.minecraft.network.INetHandler;
-import net.minecraft.network.NetHandlerPlayServer;
 import net.minecraft.world.World;
 
 public class ProxyCommon {
@@ -42,12 +40,6 @@
     }
   }
 
-  public EntityPlayer getPacketPlayer(final INetHandler inh) {
-    if (inh instanceof NetHandlerPlayServer)
-      return ((NetHandlerPlayServer) inh).playerEntity;
-    return null;
-  }
-
   public int addNewArmourRendererPrefix(final String s) {
     return 0;
   }
--- a/com/yogpc/mc_lib/YogpstopLib.java
+++ b/com/yogpc/mc_lib/YogpstopLib.java
@@ -1,20 +1,35 @@
 package com.yogpc.mc_lib;
 
-import net.minecraft.block.Block;
+import java.io.BufferedReader;
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.InputStream;
+import java.io.InputStreamReader;
+import java.io.Reader;
+import java.util.Properties;
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+import java.util.zip.ZipEntry;
+import java.util.zip.ZipInputStream;
+
 import net.minecraft.block.Block;
 import net.minecraft.item.Item;
 import net.minecraft.item.ItemStack;
 
+import com.google.common.base.Charsets;
 import com.yogpc.ip.ItemArmorElectric;
 
 import cpw.mods.fml.common.Mod;
 import cpw.mods.fml.common.SidedProxy;
 import cpw.mods.fml.common.event.FMLInitializationEvent;
-import cpw.mods.fml.common.network.NetworkRegistry;
+import cpw.mods.fml.common.network.NetworkMod;
 import cpw.mods.fml.common.registry.GameRegistry;
+import cpw.mods.fml.common.registry.LanguageRegistry;
 
 @Mod(modid = "YogpstopLib", name = "Yogpstop Library", version = "{version}",
     dependencies = "after:IC2;after:BuildCraft|Core;after:CoFHCore")
+@NetworkMod(clientSideRequired = true, serverSideRequired = false, channels = {"YogpstopLib"},
+    packetHandler = PacketHandler.class)
 public class YogpstopLib {
 
   @SidedProxy(clientSide = "com.yogpc.mc_lib.ProxyClient",
@@ -25,12 +40,9 @@
 
   @Mod.EventHandler
   public void init(final FMLInitializationEvent event) {
-    PacketHandler.channels =
-        NetworkRegistry.instance().newChannel("YogpstopLib", new YogpstopPacketCodec(),
-            new PacketHandler());
-    new ItemArmorElectric();// TODO IC2Plus
+    new ItemArmorElectric(21478);// TODO IC2Plus
     try {
-      this.workbench = new BlockWorkbench();
+      this.workbench = new BlockWorkbench(3333);
     } catch (final Exception e) {
       e.printStackTrace();
     }
@@ -40,4 +52,64 @@
     GameRegistry.registerBlock(this.workbench, "WorkbenchPlus");
     GameRegistry.registerTileEntity(TileWorkbench.class, "WorkbenchPlus");
   }
+
+  private static final Pattern lang = Pattern.compile("assets/(.*)/lang/(.*)\\.lang");
+  private static final Pattern format = Pattern.compile("%(\\d+\\$)?[\\d\\.]*[df]");
+
+  public static Properties parseLangFile(final InputStream is) {
+    final Properties table = new Properties();
+    try {
+      final Reader r = new InputStreamReader(is, Charsets.UTF_8);
+      final BufferedReader br = new BufferedReader(r);
+      String s;
+      while ((s = br.readLine()) != null)
+        if (!s.isEmpty() && s.charAt(0) != '#') {
+          final String[] astring = s.split("=", 2);
+          if (astring.length == 2)
+            table.put(astring[0], format.matcher(astring[1]).replaceAll("%$1s"));
+        }
+      br.close();
+      r.close();
+    } catch (final Exception e) {
+    }
+    return table;
+  }
+
+  private static void loadLangs_dir(final File b, final File f) {
+    String n = f.getPath().replace(b.getPath(), "").replace(File.separator, "/");
+    if (n.length() > 0 && n.charAt(0) == '/')
+      n = n.substring(1);
+    final Matcher m = lang.matcher(n);
+    if (m.matches())
+      try {
+        final InputStream is = new FileInputStream(f);
+        LanguageRegistry.instance().addStringLocalization(parseLangFile(is), m.group(2));
+        is.close();
+      } catch (final Exception e) {
+      }
+    if (f.isDirectory())
+      for (final File e : f.listFiles())
+        loadLangs_dir(b, e);
+  }
+
+  public static void loadLangs(final File in) {
+    if (in.isDirectory()) {
+      loadLangs_dir(in, in);
+      return;
+    }
+    try {
+      final InputStream is = new FileInputStream(in);
+      final ZipInputStream zis = new ZipInputStream(is);
+      ZipEntry entry;
+      while ((entry = zis.getNextEntry()) != null) {
+        final Matcher m = lang.matcher(entry.getName());
+        if (m.matches())
+          LanguageRegistry.instance().addStringLocalization(parseLangFile(zis), m.group(2));
+        zis.closeEntry();
+      }
+      zis.close();
+      is.close();
+    } catch (final Exception e) {
+    }
+  }
 }
--- a/com/yogpc/mc_lib/YogpstopPacket.java
+++ b/com/yogpc/mc_lib/YogpstopPacket.java
@@ -9,7 +9,7 @@
 import net.minecraft.nbt.CompressedStreamTools;
 import net.minecraft.nbt.NBTTagCompound;
 import net.minecraft.tileentity.TileEntity;
-import cpw.mods.fml.common.network.NetworkRegistry;
+import cpw.mods.fml.common.network.Player;
 
 public final class YogpstopPacket {
   private byte[] header;
@@ -88,18 +88,22 @@
     return this.data;
   }
 
-  public void readData(final ByteBuf d, final ChannelHandlerContext ctx) {
-    this.ep =
-        YogpstopLib.proxy.getPacketPlayer(ctx.channel().attr(NetworkRegistry.NET_HANDLER).get());
-    this.header = new byte[d.readInt()];
-    d.readBytes(this.header);
-    this.data = new byte[d.readableBytes()];
-    d.readBytes(this.data);
+  public void readData(final byte[] d, final Player p) {
+    this.ep = (EntityPlayer) p;
+    this.header = new byte[d[0] << 24 | (d[1] & 0xFF) << 16 | (d[2] & 0xFF) << 8 | (d[3] & 0xFF)];
+    this.data = new byte[d.length - this.header.length - 4];
+    System.arraycopy(d, 4, this.header, 0, this.header.length);
+    System.arraycopy(d, 4 + this.header.length, this.data, 0, this.data.length);
   }
 
-  public void writeData(final ByteBuf d) {
-    d.writeInt(this.header.length);
-    d.writeBytes(this.header);
-    d.writeBytes(this.data);
+  public byte[] writeData() {
+    final byte[] d = new byte[this.data.length + this.header.length + 4];
+    d[0] = (byte) (this.header.length >> 24);
+    d[1] = (byte) (this.header.length >> 16);
+    d[2] = (byte) (this.header.length >> 8);
+    d[3] = (byte) this.header.length;
+    System.arraycopy(this.header, 0, d, 4, this.header.length);
+    System.arraycopy(this.data, 0, d, 4 + this.header.length, this.data.length);
+    return d;
   }
 }
--- a/com/yogpc/qp/BlockBreaker.java
+++ b/com/yogpc/qp/BlockBreaker.java
@@ -29,9 +29,7 @@
 import net.minecraft.item.ItemStack;
 import net.minecraft.tileentity.TileEntity;
 import net.minecraft.util.Icon;
-import net.minecraft.world.IBlockAccess;
 import net.minecraft.world.World;
-import net.minecraft.world.WorldServer;
 import net.minecraftforge.common.FakePlayerFactory;
 import net.minecraftforge.common.ForgeDirection;
 import cpw.mods.fml.relauncher.Side;
@@ -45,8 +43,8 @@
   @SideOnly(Side.CLIENT)
   protected Icon vectrial;
 
-  protected BlockBreaker() {
-    super(Material.rock);
+  protected BlockBreaker(final int id) {
+    super(id, Material.rock);
     setCreativeTab(QuarryPlus.ct);
     setHardness(3.5F);
     setStepSound(soundStoneFootstep);
@@ -107,10 +105,10 @@
         w.getBlockMetadata(tx, ty, tz);
     if (ty < 1)
       return;
-    final Block b = w.getBlock(tx, ty, tz);
+    final Block b = Block.blocksList[w.getBlockId(tx, ty, tz)];
     if (b == null || b.isAirBlock(w, x, y, z))
       return;
-    final EntityPlayer player = FakePlayerFactory.getMinecraft((WorldServer) w);
+    final EntityPlayer player = FakePlayerFactory.getMinecraft(w);
     b.onBlockHarvested(w, tx, ty, tz, meta, player);
     if (b.removeBlockByPlayer(w, player, tx, ty, tz))
       b.onBlockDestroyedByPlayer(w, tx, ty, tz, meta);
@@ -157,22 +155,22 @@
 
   static void setDispenserDefaultDirection(final World w, final int x, final int y, final int z) {
     if (!w.isRemote) {
-      final Block b1 = w.getBlock(x, y, z - 1);
-      final Block b2 = w.getBlock(x, y, z + 1);
-      final Block b3 = w.getBlock(x - 1, y, z);
-      final Block b4 = w.getBlock(x + 1, y, z);
+      final int b1 = w.getBlockId(x, y, z - 1);
+      final int b2 = w.getBlockId(x, y, z + 1);
+      final int b3 = w.getBlockId(x - 1, y, z);
+      final int b4 = w.getBlockId(x + 1, y, z);
       byte b0 = 3;
 
-      if (b1.func_149730_j() && !b2.func_149730_j())
+      if (Block.opaqueCubeLookup[b1] && !Block.opaqueCubeLookup[b2])
         b0 = 3;
 
-      if (b2.func_149730_j() && !b1.func_149730_j())
+      if (Block.opaqueCubeLookup[b2] && !Block.opaqueCubeLookup[b1])
         b0 = 2;
 
-      if (b3.func_149730_j() && !b4.func_149730_j())
+      if (Block.opaqueCubeLookup[b3] && !Block.opaqueCubeLookup[b4])
         b0 = 5;
 
-      if (b4.func_149730_j() && !b3.func_149730_j())
+      if (Block.opaqueCubeLookup[b4] && !Block.opaqueCubeLookup[b3])
         b0 = 4;
       w.setBlockMetadataWithNotify(x, y, z, b0, 2);
     }
@@ -188,7 +186,7 @@
     ItemStack is;
     for (int i = 0; i < count; i++) {
       final int id1 = idDropped(meta, world.rand, 0);
-      if (id1 != null) {
+      if (id1 != 0) {
         is = new ItemStack(id1, 1, damageDropped(meta));
         EnchantmentHelper.enchantmentToIS(tile, is);
         this.drop.add(is);
--- a/com/yogpc/qp/BlockFrame.java
+++ b/com/yogpc/qp/BlockFrame.java
@@ -6,7 +6,6 @@
 import net.minecraft.block.Block;
 import net.minecraft.block.material.Material;
 import net.minecraft.entity.Entity;
-import net.minecraft.item.Item;
 import net.minecraft.util.AxisAlignedBB;
 import net.minecraft.util.MovingObjectPosition;
 import net.minecraft.util.Vec3;
@@ -18,8 +17,8 @@
 public class BlockFrame extends Block {
   private final boolean[] sides = new boolean[6];
 
-  public BlockFrame() {
-    super(Material.glass);
+  public BlockFrame(final int id) {
+    super(id, Material.glass);
     setSides(true, true, true, true, true, true);
     setHardness(0.5F);
     setTickRandomly(true);
@@ -65,7 +64,7 @@
 
   @Override
   public int idDropped(final int i, final Random random, final int j) {
-    return null;
+    return 0;
   }
 
   @Override
@@ -84,17 +83,17 @@
   public AxisAlignedBB getCollisionBoundingBoxFromPool(final World world, final int i, final int j,
       final int k) {
     float xMin = 0.25F, xMax = 0.75F, yMin = 0.25F, yMax = 0.75F, zMin = 0.25F, zMax = 0.75F;
-    if (world.getBlock(i - 1, j, k) == this)
+    if (world.getBlockId(i - 1, j, k) == this.blockID)
       xMin = 0;
-    if (world.getBlock(i + 1, j, k) == this)
+    if (world.getBlockId(i + 1, j, k) == this.blockID)
       xMax = 1;
-    if (world.getBlock(i, j - 1, k) == this)
+    if (world.getBlockId(i, j - 1, k) == this.blockID)
       yMin = 0;
-    if (world.getBlock(i, j + 1, k) == this)
+    if (world.getBlockId(i, j + 1, k) == this.blockID)
       yMax = 1;
-    if (world.getBlock(i, j, k - 1) == this)
+    if (world.getBlockId(i, j, k - 1) == this.blockID)
       zMin = 0;
-    if (world.getBlock(i, j, k + 1) == this)
+    if (world.getBlockId(i, j, k + 1) == this.blockID)
       zMax = 1;
     return AxisAlignedBB.getBoundingBox(i + xMin, j + yMin, k + zMin, i + xMax, j + yMax, k + zMax);
   }
@@ -103,17 +102,17 @@
   public MovingObjectPosition collisionRayTrace(final World world, final int i, final int j,
       final int k, final Vec3 vec3d, final Vec3 vec3d1) {
     float xMin = 0.25F, xMax = 0.75F, yMin = 0.25F, yMax = 0.75F, zMin = 0.25F, zMax = 0.75F;
-    if (world.getBlock(i - 1, j, k) == this)
+    if (world.getBlockId(i - 1, j, k) == this.blockID)
       xMin = 0;
-    if (world.getBlock(i + 1, j, k) == this)
+    if (world.getBlockId(i + 1, j, k) == this.blockID)
       xMax = 1;
-    if (world.getBlock(i, j - 1, k) == this)
+    if (world.getBlockId(i, j - 1, k) == this.blockID)
       yMin = 0;
-    if (world.getBlock(i, j + 1, k) == this)
+    if (world.getBlockId(i, j + 1, k) == this.blockID)
       yMax = 1;
-    if (world.getBlock(i, j, k - 1) == this)
+    if (world.getBlockId(i, j, k - 1) == this.blockID)
       zMin = 0;
-    if (world.getBlock(i, j, k + 1) == this)
+    if (world.getBlockId(i, j, k + 1) == this.blockID)
       zMax = 1;
     setBlockBounds(xMin, yMin, zMin, xMax, yMax, zMax);
     final MovingObjectPosition r = super.collisionRayTrace(world, i, j, k, vec3d, vec3d1);
@@ -127,32 +126,32 @@
     setBlockBounds(0.25F, 0.25F, 0.25F, 0.75F, 0.75F, 0.75F);
     super.addCollisionBoxesToList(world, i, j, k, axisalignedbb, arraylist, par7Entity);
 
-    if (world.getBlock(i - 1, j, k) == this) {
+    if (world.getBlockId(i - 1, j, k) == this.blockID) {
       setBlockBounds(0, 0.25F, 0.25F, 0.75F, 0.75F, 0.75F);
       super.addCollisionBoxesToList(world, i, j, k, axisalignedbb, arraylist, par7Entity);
     }
 
-    if (world.getBlock(i + 1, j, k) == this) {
+    if (world.getBlockId(i + 1, j, k) == this.blockID) {
       setBlockBounds(0.25F, 0.25F, 0.25F, 1, 0.75F, 0.75F);
       super.addCollisionBoxesToList(world, i, j, k, axisalignedbb, arraylist, par7Entity);
     }
 
-    if (world.getBlock(i, j - 1, k) == this) {
+    if (world.getBlockId(i, j - 1, k) == this.blockID) {
       setBlockBounds(0.25F, 0, 0.25F, 0.75F, 0.75F, 0.75F);
       super.addCollisionBoxesToList(world, i, j, k, axisalignedbb, arraylist, par7Entity);
     }
 
-    if (world.getBlock(i, j + 1, k) == this) {
+    if (world.getBlockId(i, j + 1, k) == this.blockID) {
       setBlockBounds(0.25F, 0.25F, 0.25F, 0.75F, 1, 0.75F);
       super.addCollisionBoxesToList(world, i, j, k, axisalignedbb, arraylist, par7Entity);
     }
 
-    if (world.getBlock(i, j, k - 1) == this) {
+    if (world.getBlockId(i, j, k - 1) == this.blockID) {
       setBlockBounds(0.25F, 0.25F, 1, 0.75F, 0.75F, 0.75F);
       super.addCollisionBoxesToList(world, i, j, k, axisalignedbb, arraylist, par7Entity);
     }
 
-    if (world.getBlock(i, j, k + 1) == this) {
+    if (world.getBlockId(i, j, k + 1) == this.blockID) {
       setBlockBounds(0.25F, 0.25F, 0.25F, 0.75F, 0.75F, 1);
       super.addCollisionBoxesToList(world, i, j, k, axisalignedbb, arraylist, par7Entity);
     }
--- a/com/yogpc/qp/BlockInfMJSrc.java
+++ b/com/yogpc/qp/BlockInfMJSrc.java
@@ -21,8 +21,8 @@
 
 public class BlockInfMJSrc extends BlockContainer {
 
-  public BlockInfMJSrc() {
-    super(Material.iron);
+  public BlockInfMJSrc(final int id) {
+    super(id, Material.iron);
     setHardness(1.5F);
     setResistance(10F);
     setStepSound(soundStoneFootstep);
--- a/com/yogpc/qp/BlockLaser.java
+++ b/com/yogpc/qp/BlockLaser.java
@@ -15,7 +15,6 @@
 
 import java.util.ArrayList;
 
-import net.minecraft.block.Block;
 import net.minecraft.block.BlockContainer;
 import net.minecraft.block.material.Material;
 import net.minecraft.client.renderer.texture.IconRegister;
@@ -35,8 +34,8 @@
   @SideOnly(Side.CLIENT)
   private Icon textureTop, textureBottom;
 
-  public BlockLaser() {
-    super(Material.iron);
+  public BlockLaser(final int id) {
+    super(id, Material.iron);
     setHardness(10F);
     setCreativeTab(QuarryPlus.ct);
     setUnlocalizedName("LaserPlus");
@@ -107,7 +106,7 @@
     ItemStack is;
     for (int i = 0; i < count; i++) {
       final int it = idDropped(meta, world.rand, 0);
-      if (it != null) {
+      if (it != 0) {
         is = new ItemStack(it, 1, damageDropped(meta));
         EnchantmentHelper.enchantmentToIS(tile, is);
         this.drop.add(is);
--- a/com/yogpc/qp/BlockMarker.java
+++ b/com/yogpc/qp/BlockMarker.java
@@ -13,7 +13,6 @@
 
 package com.yogpc.qp;
 
-import net.minecraft.block.Block;
 import net.minecraft.block.BlockContainer;
 import net.minecraft.block.material.Material;
 import net.minecraft.client.renderer.texture.IconRegister;
@@ -30,8 +29,8 @@
 
 public class BlockMarker extends BlockContainer {
 
-  public BlockMarker() {
-    super(Material.circuits);
+  public BlockMarker(final int id) {
+    super(id, Material.circuits);
     setLightValue(0.5F);
     setCreativeTab(QuarryPlus.ct);
     setUnlocalizedName("MarkerPlus");
--- a/com/yogpc/qp/BlockMiningWell.java
+++ b/com/yogpc/qp/BlockMiningWell.java
@@ -15,7 +15,6 @@
 
 import java.util.ArrayList;
 
-import net.minecraft.block.Block;
 import net.minecraft.block.BlockContainer;
 import net.minecraft.block.material.Material;
 import net.minecraft.client.renderer.texture.IconRegister;
@@ -34,8 +33,8 @@
 public class BlockMiningWell extends BlockContainer {
   Icon textureFront, textureBack, textureTop, texW;
 
-  public BlockMiningWell() {
-    super(Material.ground);
+  public BlockMiningWell(final int id) {
+    super(id, Material.ground);
     setHardness(1.5F);
     setResistance(10F);
     setCreativeTab(QuarryPlus.ct);
@@ -119,7 +118,7 @@
       return;
     final int count = quantityDropped(meta, 0, world.rand);
     final int it = idDropped(meta, world.rand, 0);
-    if (it != null)
+    if (it != 0)
       for (int i = 0; i < count; i++) {
         final ItemStack is = new ItemStack(it, 1, damageDropped(meta));
         EnchantmentHelper.enchantmentToIS(tile, is);
--- a/com/yogpc/qp/BlockMover.java
+++ b/com/yogpc/qp/BlockMover.java
@@ -25,8 +25,8 @@
 public class BlockMover extends Block {
   Icon textureTop, textureBottom;
 
-  public BlockMover() {
-    super(Material.iron);
+  public BlockMover(final int id) {
+    super(id, Material.iron);
     setHardness(1.2F);
     setCreativeTab(QuarryPlus.ct);
     setUnlocalizedName("EnchantMover");
--- a/com/yogpc/qp/BlockPlacer.java
+++ b/com/yogpc/qp/BlockPlacer.java
@@ -28,9 +28,7 @@
 import net.minecraft.nbt.NBTTagCompound;
 import net.minecraft.tileentity.TileEntity;
 import net.minecraft.util.Icon;
-import net.minecraft.world.IBlockAccess;
 import net.minecraft.world.World;
-import net.minecraft.world.WorldServer;
 import net.minecraftforge.common.FakePlayerFactory;
 import net.minecraftforge.common.ForgeDirection;
 import cpw.mods.fml.relauncher.Side;
@@ -45,8 +43,8 @@
   @SideOnly(Side.CLIENT)
   protected Icon vectrial;
 
-  protected BlockPlacer() {
-    super(Material.rock);
+  protected BlockPlacer(final int id) {
+    super(id, Material.rock);
     setCreativeTab(QuarryPlus.ct);
     setHardness(3.5F);
     setStepSound(soundStoneFootstep);
@@ -92,7 +90,7 @@
     final boolean flag1 = (i1 & 8) != 0;
 
     if (flag && !flag1) {
-      par1World.scheduleBlockUpdate(par2, par3, par4, this, 0);
+      par1World.scheduleBlockUpdate(par2, par3, par4, this.blockID, 0);
       par1World.setBlockMetadataWithNotify(par2, par3, par4, i1 | 8, 4);
     } else if (!flag && flag1)
       par1World.setBlockMetadataWithNotify(par2, par3, par4, i1 & -9, 4);
@@ -132,7 +130,7 @@
       ty = y + fd2.offsetY;
       tz = z + fd2.offsetZ;
 
-      final EntityPlayer player = FakePlayerFactory.getMinecraft((WorldServer) world);
+      final EntityPlayer player = FakePlayerFactory.getMinecraft(world);
       ItemStack is = null;
       int i = 0;
       for (; i < tile.getSizeInventory(); i++) {
@@ -159,7 +157,7 @@
               tz + fd6.offsetZ, sd5, 0.5F, 0.5F, 0.5F))
             break;
         }
-        final Block k = world.getBlock(tx, ty, tz);
+        final Block k = Block.blocksList[world.getBlockId(tx, ty, tz)];
         if (k != null && k.onBlockActivated(world, tx, ty, tz, player, sd1, 0.5F, 0.5F, 0.5F))
           break;
         if (is != null) {
--- a/com/yogpc/qp/BlockPlainPipe.java
+++ b/com/yogpc/qp/BlockPlainPipe.java
@@ -4,11 +4,10 @@
 
 import net.minecraft.block.Block;
 import net.minecraft.block.material.Material;
-import net.minecraft.item.Item;
 
 public class BlockPlainPipe extends Block {
-  public BlockPlainPipe() {
-    super(Material.glass);
+  public BlockPlainPipe(final int id) {
+    super(id, Material.glass);
     this.minX = 0.25;
     this.minY = 0.0;
     this.minZ = 0.25;
@@ -30,6 +29,6 @@
 
   @Override
   public int idDropped(final int i, final Random random, final int fortune) {
-    return null;
+    return 0;
   }
 }
--- a/com/yogpc/qp/BlockPump.java
+++ b/com/yogpc/qp/BlockPump.java
@@ -15,7 +15,6 @@
 
 import java.util.ArrayList;
 
-import net.minecraft.block.Block;
 import net.minecraft.block.BlockContainer;
 import net.minecraft.block.material.Material;
 import net.minecraft.client.renderer.texture.IconRegister;
@@ -34,8 +33,8 @@
 
   private Icon textureTop, textureBottom, textureSide, texW, texC;
 
-  public BlockPump() {
-    super(Material.iron);
+  public BlockPump(final int id) {
+    super(id, Material.iron);
     setHardness(5F);
     setCreativeTab(QuarryPlus.ct);
     setUnlocalizedName("PumpPlus");
@@ -92,7 +91,7 @@
       return;
     final int count = quantityDropped(meta, 0, world.rand);
     final int it = idDropped(meta, world.rand, 0);
-    if (it != null)
+    if (it != 0)
       for (int i = 0; i < count; i++) {
         final ItemStack is = new ItemStack(it, 1, damageDropped(meta));
         EnchantmentHelper.enchantmentToIS(tile, is);
--- a/com/yogpc/qp/BlockQuarry.java
+++ b/com/yogpc/qp/BlockQuarry.java
@@ -15,7 +15,6 @@
 
 import java.util.ArrayList;
 
-import net.minecraft.block.Block;
 import net.minecraft.block.BlockContainer;
 import net.minecraft.block.material.Material;
 import net.minecraft.client.renderer.texture.IconRegister;
@@ -34,8 +33,8 @@
 public class BlockQuarry extends BlockContainer {
   Icon textureTop, textureFront, texBB, texNNB, texMF;
 
-  public BlockQuarry() {
-    super(Material.iron);
+  public BlockQuarry(final int id) {
+    super(id, Material.iron);
     setHardness(1.5F);
     setResistance(10F);
     setStepSound(soundStoneFootstep);
@@ -53,7 +52,7 @@
       return;
     final int count = quantityDropped(meta, 0, world.rand);
     final int it = idDropped(meta, world.rand, 0);
-    if (it != null)
+    if (it != 0)
       for (int i = 0; i < count; i++) {
         final ItemStack is = new ItemStack(it, 1, damageDropped(meta));
         EnchantmentHelper.enchantmentToIS(tile, is);
--- a/com/yogpc/qp/BlockRefinery.java
+++ b/com/yogpc/qp/BlockRefinery.java
@@ -15,7 +15,6 @@
 
 import java.util.ArrayList;
 
-import net.minecraft.block.Block;
 import net.minecraft.block.BlockContainer;
 import net.minecraft.block.material.Material;
 import net.minecraft.entity.EntityLivingBase;
@@ -32,8 +31,8 @@
 
 public class BlockRefinery extends BlockContainer {
 
-  public BlockRefinery() {
-    super(Material.iron);
+  public BlockRefinery(final int id) {
+    super(id, Material.iron);
     setHardness(5F);
     setCreativeTab(QuarryPlus.ct);
     setUnlocalizedName("RefineryPlus");
@@ -55,7 +54,7 @@
       return;
     final int count = quantityDropped(meta, 0, world.rand);
     final int it = idDropped(meta, world.rand, 0);
-    if (it != null)
+    if (it != 0)
       for (int i = 0; i < count; i++) {
         final ItemStack is = new ItemStack(it, 1, damageDropped(meta));
         EnchantmentHelper.enchantmentToIS(tile, is);
@@ -82,7 +81,7 @@
   }
 
   private static void consumeItem(final EntityPlayer ep, final ItemStack stack) {
-    final ItemStack container = stack.getItem().getContainerItem();
+    final ItemStack container = stack.getItem().hasContainerItem() ? new ItemStack(stack.getItem().getContainerItem()) : null;
     stack.stackSize--;
     if (stack.stackSize > 0)
       ep.inventory.setInventorySlotContents(ep.inventory.currentItem, stack);
--- a/com/yogpc/qp/ChunkLoadingHandler.java
+++ b/com/yogpc/qp/ChunkLoadingHandler.java
@@ -15,7 +15,6 @@
 
 import java.util.List;
 
-import net.minecraft.block.Block;
 import net.minecraft.tileentity.TileEntity;
 import net.minecraft.world.World;
 import net.minecraftforge.common.ForgeChunkManager;
@@ -47,8 +46,8 @@
       final int quarryY = ticket.getModData().getInteger("quarryY");
       final int quarryZ = ticket.getModData().getInteger("quarryZ");
 
-      final Block b = world.getBlock(quarryX, quarryY, quarryZ);
-      if (b == QuarryPlus.blockQuarry || b == QuarryPlus.blockMarker)
+      final int b = world.getBlockId(quarryX, quarryY, quarryZ);
+      if (b == QuarryPlus.blockQuarry.blockID || b == QuarryPlus.blockMarker.blockID)
         validTickets.add(ticket);
     }
     return validTickets;
--- a/com/yogpc/qp/ContainerMover.java
+++ b/com/yogpc/qp/ContainerMover.java
@@ -73,7 +73,7 @@
 
   @Override
   public boolean canInteractWith(final EntityPlayer var1) {
-    return this.worldObj.getBlock(this.posX, this.posY, this.posZ) != QuarryPlus.blockMover ? false
+    return this.worldObj.getBlockId(this.posX, this.posY, this.posZ) != QuarryPlus.blockMover.blockID ? false
         : var1.getDistanceSq(this.posX + 0.5D, this.posY + 0.5D, this.posZ + 0.5D) <= 64.0D;
   }
 
@@ -111,7 +111,7 @@
               final NBTTagList nlist = new NBTTagList();
               for (int j = 0; j < list.tagCount(); j++)
                 if (((NBTTagCompound)list.tagAt(j)).getShort("id") != eid)
-                  nlist.appendTag(((NBTTagCompound)list.tagAt(j)));
+                  nlist.appendTag((list.tagAt(j)));
               list = nlist;
             }
             is.getTagCompound().removeTag("ench");
--- a/com/yogpc/qp/CreativeTabQuarryPlus.java
+++ b/com/yogpc/qp/CreativeTabQuarryPlus.java
@@ -11,7 +11,7 @@
 
   @Override
   public Item getTabIconItem() {
-    return Item.getItemFromBlock(QuarryPlus.blockQuarry);
+    return Item.itemsList[QuarryPlus.blockQuarry.blockID];
   }
 
 }
--- a/com/yogpc/qp/EnchantmentHelper.java
+++ b/com/yogpc/qp/EnchantmentHelper.java
@@ -18,6 +18,7 @@
 
 import net.minecraft.enchantment.Enchantment;
 import net.minecraft.item.ItemStack;
+import net.minecraft.nbt.NBTTagCompound;
 import net.minecraft.nbt.NBTTagList;
 import net.minecraft.util.StatCollector;
 
--- a/com/yogpc/qp/ItemBlockBreaker.java
+++ b/com/yogpc/qp/ItemBlockBreaker.java
@@ -13,13 +13,12 @@
 
 package com.yogpc.qp;
 
-import net.minecraft.block.Block;
 import net.minecraft.item.ItemBlock;
 import net.minecraft.item.ItemStack;
 
 public class ItemBlockBreaker extends ItemBlock implements IEnchantableItem {
 
-  public ItemBlockBreaker(final Block b) {
+  public ItemBlockBreaker(final int b) {
     super(b);
   }
 
--- a/com/yogpc/qp/ItemBlockPump.java
+++ b/com/yogpc/qp/ItemBlockPump.java
@@ -13,13 +13,12 @@
 
 package com.yogpc.qp;
 
-import net.minecraft.block.Block;
 import net.minecraft.item.ItemBlock;
 import net.minecraft.item.ItemStack;
 
 public class ItemBlockPump extends ItemBlock implements IEnchantableItem {
 
-  public ItemBlockPump(final Block b) {
+  public ItemBlockPump(final int b) {
     super(b);
   }
 
--- a/com/yogpc/qp/ItemBlockQuarry.java
+++ b/com/yogpc/qp/ItemBlockQuarry.java
@@ -13,13 +13,12 @@
 
 package com.yogpc.qp;
 
-import net.minecraft.block.Block;
 import net.minecraft.item.ItemBlock;
 import net.minecraft.item.ItemStack;
 
 public class ItemBlockQuarry extends ItemBlock implements IEnchantableItem {
 
-  public ItemBlockQuarry(final Block b) {
+  public ItemBlockQuarry(final int b) {
     super(b);
   }
 
--- a/com/yogpc/qp/ItemBlockRefinery.java
+++ b/com/yogpc/qp/ItemBlockRefinery.java
@@ -13,13 +13,12 @@
 
 package com.yogpc.qp;
 
-import net.minecraft.block.Block;
 import net.minecraft.item.ItemBlock;
 import net.minecraft.item.ItemStack;
 
 public class ItemBlockRefinery extends ItemBlock implements IEnchantableItem {
 
-  public ItemBlockRefinery(final Block b) {
+  public ItemBlockRefinery(final int b) {
     super(b);
   }
 
--- a/com/yogpc/qp/ItemTool.java
+++ b/com/yogpc/qp/ItemTool.java
@@ -30,15 +30,14 @@
 import com.yogpc.mc_lib.PacketHandler;
 import com.yogpc.qp.QuarryPlus.BlockData;
 
-import cpw.mods.fml.common.registry.GameData;
 import cpw.mods.fml.relauncher.Side;
 import cpw.mods.fml.relauncher.SideOnly;
 
 public class ItemTool extends Item implements IEnchantableItem {
   Icon ile, ils;
 
-  public ItemTool() {
-    super();
+  public ItemTool(final int id) {
+    super(id);
     setMaxStackSize(1);
     setHasSubtypes(true);
     setMaxDamage(0);
@@ -78,7 +77,7 @@
             f = true;
         }
       NBTTagCompound c = is.getTagCompound();
-      final Block b = w.getBlock(x, y, z);
+      final Block b = Block.blocksList[w.getBlockId(x, y, z)];
       BlockData bd = null;
       if (c != null && c.hasKey("Bname")) {
         bd = new BlockData(c.getString("Bname"), c.getInteger("Bmeta"));
@@ -105,7 +104,7 @@
           c = new NBTTagCompound();
           is.setTagCompound(c);
         }
-        final String name = GameData.getBlockRegistry().getNameForObject(b);
+        final String name = Integer.toString(b.blockID);
         final int meta = w.getBlockMetadata(x, y, z);
         if (c.hasKey("Bname") && name.equals(c.getString("Bname")) && meta == c.getInteger("Bmeta"))
           c.setInteger("Bmeta", OreDictionary.WILDCARD_VALUE);
--- a/com/yogpc/qp/QuarryPlus.java
+++ b/com/yogpc/qp/QuarryPlus.java
@@ -16,8 +16,6 @@
 import net.minecraft.block.Block;
 import net.minecraft.client.renderer.texture.TextureMap;
 import net.minecraft.creativetab.CreativeTabs;
-import net.minecraft.block.Block;
-import net.minecraft.item.Item;
 import net.minecraft.item.Item;
 import net.minecraft.item.ItemStack;
 import net.minecraft.util.Icon;
@@ -31,6 +29,7 @@
 
 import com.yogpc.mc_lib.PacketHandler;
 import com.yogpc.mc_lib.WorkbenchRecipe;
+import com.yogpc.mc_lib.YogpstopLib;
 import com.yogpc.qp.client.RenderEntityLaser;
 
 import cpw.mods.fml.client.registry.RenderingRegistry;
@@ -40,7 +39,6 @@
 import cpw.mods.fml.common.event.FMLPreInitializationEvent;
 import net.minecraftforge.event.ForgeSubscribe;
 import cpw.mods.fml.common.network.NetworkRegistry;
-import cpw.mods.fml.common.registry.GameData;
 import cpw.mods.fml.common.registry.GameRegistry;
 import cpw.mods.fml.relauncher.Side;
 import cpw.mods.fml.relauncher.SideOnly;
@@ -104,8 +102,22 @@
   @Mod.EventHandler
   public void preInit(final FMLPreInitializationEvent event) {
     final Configuration cfg = new Configuration(event.getSuggestedConfigurationFile());
+    final int[] id = new int[13];
     try {
       cfg.load();
+      id[0] = cfg.getBlock("Quarry", 1970).getInt();
+      id[1] = cfg.getBlock("Marker", 1971).getInt();
+      id[2] = cfg.getBlock("EnchantMover", 1972).getInt();
+      id[3] = cfg.getBlock("MiningWell", 1973).getInt();
+      id[4] = cfg.getBlock("Pump", 1974).getInt();
+      id[5] = cfg.getBlock("InfMJSrc", 1975).getInt();
+      id[6] = cfg.getBlock("Refinery", 1976).getInt();
+      id[7] = cfg.getBlock("Placer", 1977).getInt();
+      id[8] = cfg.getBlock("Breaker", 1978).getInt();
+      id[9] = cfg.getBlock("Laser", 1979).getInt();
+      id[10] = cfg.getBlock("PlainPipe", 1980).getInt();
+      id[11] = cfg.getBlock("Frame", 1981).getInt();
+      id[12] = cfg.getItem("Tools", 18463).getInt();
       final Property RD = cfg.get(Configuration.CATEGORY_GENERAL, "RecipeDifficulty", 2);
       RD.comment =
           "0:AsCheatRecipe,1:EasyRecipe,2:NormalRecipe(Default),3:HardRecipe,other:NormalRecipe";
@@ -117,24 +129,25 @@
       cfg.save();
     }
     try {
-      blockQuarry = new BlockQuarry();
-      blockMarker = new BlockMarker();
-      blockMover = new BlockMover();
-      blockMiningWell = new BlockMiningWell();
-      blockPump = new BlockPump();
-      blockInfMJSrc = new BlockInfMJSrc();
-      blockRefinery = new BlockRefinery();
-      blockPlacer = new BlockPlacer();
-      blockBreaker = new BlockBreaker();
-      blockLaser = new BlockLaser();
-      blockPlainPipe = new BlockPlainPipe();
-      blockFrame = new BlockFrame();
-      itemTool = new ItemTool();
+      blockQuarry = new BlockQuarry(id[0]);
+      blockMarker = new BlockMarker(id[1]);
+      blockMover = new BlockMover(id[2]);
+      blockMiningWell = new BlockMiningWell(id[3]);
+      blockPump = new BlockPump(id[4]);
+      blockInfMJSrc = new BlockInfMJSrc(id[5]);
+      blockRefinery = new BlockRefinery(id[6]);
+      blockPlacer = new BlockPlacer(id[7]);
+      blockBreaker = new BlockBreaker(id[8]);
+      blockLaser = new BlockLaser(id[9]);
+      blockPlainPipe = new BlockPlainPipe(id[10]);
+      blockFrame = new BlockFrame(id[11]);
+      itemTool = new ItemTool(id[12]);
     } catch (final Exception e) {
       e.printStackTrace();
     }
     ForgeChunkManager.setForcedChunkLoadingCallback(instance, new ChunkLoadingHandler());
     MinecraftForge.EVENT_BUS.register(this);
+    YogpstopLib.loadLangs(event.getSourceFile());
   }
 
   @Mod.EventHandler
@@ -241,7 +254,7 @@
       sb.append(bd.meta);
     }
     sb.append("  ");
-    sb.append(GameData.getBlockRegistry().getObject(bd.name).getLocalizedName());
+    sb.append(Block.blocksList[Integer.parseInt(bd.name)].getLocalizedName());
     return sb.toString();
   }
 }
--- a/com/yogpc/qp/TileBasic.java
+++ b/com/yogpc/qp/TileBasic.java
@@ -44,8 +44,6 @@
 import com.yogpc.mc_lib.YogpstopPacket;
 import com.yogpc.qp.QuarryPlus.BlockData;
 
-import cpw.mods.fml.common.registry.GameData;
-
 public abstract class TileBasic extends APowerTile implements IInventory, IEnchantableTile {
   protected ForgeDirection pump = ForgeDirection.UNKNOWN;
 
@@ -254,8 +252,8 @@
 
   protected boolean S_breakBlock(final int x, final int y, final int z) {
     final Collection<ItemStack> dropped = new LinkedList<ItemStack>();
-    final Block b =
-        this.worldObj.getChunkProvider().loadChunk(x >> 4, z >> 4).getBlock(x & 0xF, y, z & 0xF);
+    final Block b =Block.blocksList[
+        this.worldObj.getChunkProvider().loadChunk(x >> 4, z >> 4).getBlockID(x & 0xF, y, z & 0xF)];
     if (b == null || b.isAirBlock(this.worldObj, x, y, z))
       return true;
     if (TilePump.isLiquid(b, false, null, 0, 0, 0, 0)) {
@@ -274,7 +272,7 @@
       return false;
     this.cacheItems.addAll(dropped);
     this.worldObj.playAuxSFXAtEntity(null, 2001, x, y, z,
-        Block.getIdFromBlock(b) | this.worldObj.getBlockMetadata(x, y, z) << 12);
+        b.blockID | this.worldObj.getBlockMetadata(x, y, z) << 12);
     this.worldObj.setBlockToAir(x, y, z);
     return true;
   }
@@ -295,8 +293,7 @@
     final int meta = this.worldObj.getBlockMetadata(x, y, z);
     if (b.canSilkHarvest(this.worldObj, null, x, y, z, meta)
         && this.silktouch
-        && this.silktouchList.contains(new BlockData(GameData.getBlockRegistry()
-            .getNameForObject(b), meta)) == this.silktouchInclude)
+        && this.silktouchList.contains(new BlockData(Integer.toString(b.blockID), meta)) == this.silktouchInclude)
       try {
         list.add((ItemStack) createStackedBlock.invoke(b, new Integer(meta)));
         return -1;
@@ -305,7 +302,7 @@
       } catch (final Error e) {
         e.printStackTrace();
       }
-    if (this.fortuneList.contains(new BlockData(GameData.getBlockRegistry().getNameForObject(b),
+    if (this.fortuneList.contains(new BlockData(Integer.toString(b.blockID),
         meta)) == this.fortuneInclude) {
       list.addAll(b.getBlockDropped(this.worldObj, x, y, z, meta, this.fortune));
       return this.fortune;
--- a/com/yogpc/qp/TileMarker.java
+++ b/com/yogpc/qp/TileMarker.java
@@ -196,7 +196,7 @@
         final boolean bb) {
       final ArrayList<ItemStack> ret = new ArrayList<ItemStack>();
       final TileEntity te = this.w.getBlockTileEntity(x, y, z);
-      final Block b = this.w.getBlock(x, y, z);
+      final Block b = Block.blocksList[this.w.getBlockId(x, y, z)];
       if (b instanceof BlockMarker) {
         if (te instanceof TileMarker)
           ((TileMarker) te).link = null;
@@ -412,16 +412,16 @@
   private static void S_renewConnection(final Link l, final World w, final int x, final int y,
       final int z) {
     int tx = 0, ty = 0, tz = 0;
-    Block b;
+    int b;
     if (l.xx == l.xn) {
       for (tx = 1; tx <= MAX_SIZE; tx++) {
-        b = w.getBlock(x + tx, y, z);
-        if (b instanceof BlockMarker && !linkList.contains(new BlockIndex(w, x + tx, y, z))) {
+        b = w.getBlockId(x + tx, y, z);
+        if (b == QuarryPlus.blockMarker.blockID && !linkList.contains(new BlockIndex(w, x + tx, y, z))) {
           l.xx = x + tx;
           break;
         }
-        b = w.getBlock(x - tx, y, z);
-        if (b instanceof BlockMarker && !linkList.contains(new BlockIndex(w, x - tx, y, z))) {
+        b = w.getBlockId(x - tx, y, z);
+        if (b == QuarryPlus.blockMarker.blockID && !linkList.contains(new BlockIndex(w, x - tx, y, z))) {
           tx = -tx;
           l.xn = x + tx;
           break;
@@ -432,13 +432,13 @@
     }
     if (l.yx == l.yn) {
       for (ty = 1; ty <= MAX_SIZE; ty++) {
-        b = w.getBlock(x, y + ty, z);
-        if (b instanceof BlockMarker && !linkList.contains(new BlockIndex(w, x, y + ty, z))) {
+        b = w.getBlockId(x, y + ty, z);
+        if (b == QuarryPlus.blockMarker.blockID && !linkList.contains(new BlockIndex(w, x, y + ty, z))) {
           l.yx = y + ty;
           break;
         }
-        b = w.getBlock(x, y - ty, z);
-        if (b instanceof BlockMarker && !linkList.contains(new BlockIndex(w, x, y - ty, z))) {
+        b = w.getBlockId(x, y - ty, z);
+        if (b == QuarryPlus.blockMarker.blockID && !linkList.contains(new BlockIndex(w, x, y - ty, z))) {
           ty = -ty;
           l.yn = y + ty;
           break;
@@ -449,13 +449,13 @@
     }
     if (l.zx == l.zn) {
       for (tz = 1; tz <= MAX_SIZE; tz++) {
-        b = w.getBlock(x, y, z + tz);
-        if (b instanceof BlockMarker && !linkList.contains(new BlockIndex(w, x, y, z + tz))) {
+        b = w.getBlockId(x, y, z + tz);
+        if (b == QuarryPlus.blockMarker.blockID && !linkList.contains(new BlockIndex(w, x, y, z + tz))) {
           l.zx = z + tz;
           break;
         }
-        b = w.getBlock(x, y, z - tz);
-        if (b instanceof BlockMarker && !linkList.contains(new BlockIndex(w, x, y, z - tz))) {
+        b = w.getBlockId(x, y, z - tz);
+        if (b == QuarryPlus.blockMarker.blockID && !linkList.contains(new BlockIndex(w, x, y, z - tz))) {
           tz = -tz;
           l.zn = z + tz;
           break;
@@ -626,7 +626,7 @@
   @Override
   public void invalidate() {
     super.invalidate();
-    if (this.worldObj.getBlock(this.xCoord, this.yCoord, this.zCoord) != QuarryPlus.blockMarker)
+    if (this.worldObj.getBlockId(this.xCoord, this.yCoord, this.zCoord) != QuarryPlus.blockMarker.blockID)
       G_destroy();
   }
 }
--- a/com/yogpc/qp/TileMiningWell.java
+++ b/com/yogpc/qp/TileMiningWell.java
@@ -63,7 +63,7 @@
     int depth = this.yCoord - 1;
     while (!S_checkTarget(depth)) {
       if (this.working)
-        this.worldObj.setBlock(this.xCoord, depth, this.zCoord, QuarryPlus.blockPlainPipe);
+        this.worldObj.setBlock(this.xCoord, depth, this.zCoord, QuarryPlus.blockPlainPipe.blockID);
       depth--;
     }
     if (this.working)
@@ -76,15 +76,15 @@
       G_destroy();
       return true;
     }
-    final Block b =
+    final Block b = Block.blocksList[
         this.worldObj.getChunkProvider().loadChunk(this.xCoord >> 4, this.zCoord >> 4)
-            .getBlock(this.xCoord & 0xF, depth, this.zCoord & 0xF);
+            .getBlockID(this.xCoord & 0xF, depth, this.zCoord & 0xF)];
     final float h =
         b == null ? -1 : b.getBlockHardness(this.worldObj, this.xCoord, depth, this.zCoord);
     if (b == null || h < 0 || b == QuarryPlus.blockPlainPipe
         || b.isAirBlock(this.worldObj, this.xCoord, depth, this.zCoord))
       return false;
-    if (this.pump == ForgeDirection.UNKNOWN && b.getMaterial().isLiquid())
+    if (this.pump == ForgeDirection.UNKNOWN && this.worldObj.getBlockMaterial(this.xCoord, depth, this.zCoord).isLiquid())
       return false;
     if (!this.working) {
       this.working = true;
@@ -123,7 +123,7 @@
     G_renew_powerConfigure();
     PacketHandler.sendNowPacket(this, (byte) 0);
     for (int depth = this.yCoord - 1; depth > 0; depth--) {
-      if (this.worldObj.getBlock(this.xCoord, depth, this.zCoord) != QuarryPlus.blockPlainPipe)
+      if (this.worldObj.getBlockId(this.xCoord, depth, this.zCoord) != QuarryPlus.blockPlainPipe.blockID)
         break;
       this.worldObj.setBlockToAir(this.xCoord, depth, this.zCoord);
     }
--- a/com/yogpc/qp/TilePump.java
+++ b/com/yogpc/qp/TilePump.java
@@ -20,7 +20,6 @@
 
 import net.minecraft.block.Block;
 import net.minecraft.entity.player.EntityPlayer;
-import net.minecraft.block.Block;
 import net.minecraft.nbt.NBTTagCompound;
 import net.minecraft.nbt.NBTTagList;
 import net.minecraft.nbt.NBTTagString;
@@ -84,7 +83,7 @@
     if (nbttc.getTag("mapping0") instanceof NBTTagList)
       for (int i = 0; i < this.mapping.length; i++)
         readStringCollection(
-            nbttc.getTagList(new StringBuilder().append("mapping").append(i).toString(), 8),
+            nbttc.getTagList(new StringBuilder().append("mapping").append(i).toString()),
             this.mapping[i]);
     this.range = nbttc.getByte("range");
     this.quarryRange = nbttc.getBoolean("quarryRange");
@@ -406,7 +405,7 @@
     while (cp != cg) {
       ebs_c = this.ebses[xb[cg] >> 4][zb[cg] >> 4][yb[cg] >> 4];
       if (ebs_c != null) {
-        b_c = ebs_c.getBlockByExtId(xb[cg] & 0xF, yb[cg] & 0xF, zb[cg] & 0xF);
+        b_c = Block.blocksList[ebs_c.getExtBlockID(xb[cg] & 0xF, yb[cg] & 0xF, zb[cg] & 0xF)];
         if (this.blocks[yb[cg] - this.yOffset][xb[cg]][zb[cg]] == 0
             && isLiquid(b_c, false, null, 0, 0, 0, 0)) {
           this.blocks[yb[cg] - this.yOffset][xb[cg]][zb[cg]] = 0x3F;
@@ -467,8 +466,7 @@
             for (bz = 0; bz < this.block_side_z; bz++)
               if ((this.blocks[this.py - this.yOffset][bx][bz] & 0x40) != 0) {
                 bb =
-                    this.ebses[bx >> 4][bz >> 4][this.py >> 4].getBlockByExtId(bx & 0xF,
-                        this.py & 0xF, bz & 0xF);
+                    Block.blocksList[this.ebses[bx >> 4][bz >> 4][this.py >> 4].getExtBlockID(bx & 0xF, this.py & 0xF, bz & 0xF)];
                 if (isLiquid(bb, false, null, 0, 0, 0, 0))
                   count++;
               }
@@ -476,8 +474,7 @@
           for (bz = 0; bz < this.block_side_z; bz++)
             if (this.blocks[this.py - this.yOffset][this.px][bz] != 0) {
               bb =
-                  this.ebses[this.px >> 4][bz >> 4][this.py >> 4].getBlockByExtId(this.px & 0xF,
-                      this.py & 0xF, bz & 0xF);
+                  Block.blocksList[this.ebses[this.px >> 4][bz >> 4][this.py >> 4].getExtBlockID(this.px & 0xF, this.py & 0xF, bz & 0xF)];
               meta =
                   this.ebses[this.px >> 4][bz >> 4][this.py >> 4].getExtBlockMetadata(
                       this.px & 0xF, this.py & 0xF, bz & 0xF);
@@ -499,11 +496,11 @@
         for (bx = 0; bx < this.block_side_x; bx++)
           for (bz = 0; bz < this.block_side_z; bz++)
             if ((this.blocks[this.py - this.yOffset][bx][bz] & 0x40) != 0)
-              drainBlock(bx, bz, QuarryPlus.blockFrame);
+              drainBlock(bx, bz, QuarryPlus.blockFrame.blockID);
       } else
         for (bz = 0; bz < this.block_side_z; bz++)
           if (this.blocks[this.py - this.yOffset][this.px][bz] != 0)
-            drainBlock(this.px, bz, Blocks.air);
+            drainBlock(this.px, bz, 0);
     S_sendNowPacket();
     return this.py < this.cy;
   }
@@ -658,10 +655,9 @@
     return false;
   }
 
-  private final void drainBlock(final int bx, final int bz, final Block tb) {
+  private final void drainBlock(final int bx, final int bz, final int tb) {
     final Block b =
-        this.ebses[bx >> 4][bz >> 4][this.py >> 4].getBlockByExtId(bx & 0xF, this.py & 0xF,
-            bz & 0xF);
+        Block.blocksList[this.ebses[bx >> 4][bz >> 4][this.py >> 4].getExtBlockID(bx & 0xF, this.py & 0xF, bz & 0xF)];
     final int meta =
         this.ebses[bx >> 4][bz >> 4][this.py >> 4].getExtBlockMetadata(bx & 0xF, this.py & 0xF,
             bz & 0xF);
--- a/com/yogpc/qp/TileQuarry.java
+++ b/com/yogpc/qp/TileQuarry.java
@@ -90,9 +90,9 @@
   private boolean S_checkTarget() {
     if (this.targetY > this.yMax)
       this.targetY = this.yMax;
-    final Block b =
+    final Block b =Block.blocksList[
         this.worldObj.getChunkProvider().loadChunk(this.targetX >> 4, this.targetZ >> 4)
-            .getBlock(this.targetX & 0xF, this.targetY, this.targetZ & 0xF);
+            .getBlockID(this.targetX & 0xF, this.targetY, this.targetZ & 0xF)];
     final float h =
         b == null ? -1 : b
             .getBlockHardness(this.worldObj, this.targetX, this.targetY, this.targetZ);
@@ -151,7 +151,7 @@
           return S_checkTarget();
         }
         if (b != null
-            && b.getMaterial().isSolid()
+            && this.worldObj.getBlockMaterial(this.targetX, this.targetY, this.targetZ).isSolid()
             && !(b == QuarryPlus.blockFrame && this.worldObj.getBlockMetadata(this.targetX,
                 this.targetY, this.targetZ) == 0)) {
           this.now = NOTNEEDBREAK;
@@ -274,7 +274,7 @@
     this.digged = true;
     if (!PowerManager.useEnergyF(this, this.unbreaking))
       return false;
-    this.worldObj.setBlock(this.targetX, this.targetY, this.targetZ, QuarryPlus.blockFrame);
+    this.worldObj.setBlock(this.targetX, this.targetY, this.targetZ, QuarryPlus.blockFrame.blockID);
     S_setNextTarget();
     return true;
   }
@@ -428,7 +428,7 @@
   }
 
   private void S_setBreakableFrame(final int x, final int y, final int z) {
-    if (this.worldObj.getBlock(x, y, z) == QuarryPlus.blockFrame)
+    if (this.worldObj.getBlockId(x, y, z) == QuarryPlus.blockFrame.blockID)
       this.worldObj.setBlockMetadataWithNotify(x, y, z, 1, 3);
   }
 
--- a/com/yogpc/qp/TileRefinery.java
+++ b/com/yogpc/qp/TileRefinery.java
@@ -24,8 +24,7 @@
 import net.minecraftforge.fluids.FluidStack;
 import net.minecraftforge.fluids.FluidTankInfo;
 import net.minecraftforge.fluids.IFluidHandler;
-import buildcraft.api.recipes.BuildcraftRecipes;
-import buildcraft.api.recipes.RefineryRecipes.RecipeManager.RefineryRecipes.Recipe;
+import buildcraft.api.recipes.RefineryRecipes;
 
 import com.google.common.io.ByteArrayDataInput;
 import com.google.common.io.ByteStreams;
--- a/com/yogpc/qp/client/RenderFrame.java
+++ b/com/yogpc/qp/client/RenderFrame.java
@@ -29,7 +29,7 @@
   @Override
   public boolean renderWorldBlock(final IBlockAccess w, final int i, final int j, final int k,
       final Block b, final int m, final RenderBlocks r) {
-    if (w.getBlock(i - 1, j, k) == b) {
+    if (w.getBlockId(i - 1, j, k) == b.blockID) {
       r.setRenderBounds(0.0F, 0.25F, 0.25F, 0.25F, 0.75F, 0.75F);
       ((BlockFrame) b).setSides(true, true, true, true, false, false);
     } else {
@@ -37,7 +37,7 @@
       ((BlockFrame) b).setSides(false, false, false, false, true, false);
     }
     r.renderStandardBlock(b, i, j, k);
-    if (w.getBlock(i + 1, j, k) == b) {
+    if (w.getBlockId(i + 1, j, k) == b.blockID) {
       r.setRenderBounds(0.75F, 0.25F, 0.25F, 1.0F, 0.75F, 0.75F);
       ((BlockFrame) b).setSides(true, true, true, true, false, false);
     } else {
@@ -45,7 +45,7 @@
       ((BlockFrame) b).setSides(false, false, false, false, false, true);
     }
     r.renderStandardBlock(b, i, j, k);
-    if (w.getBlock(i, j - 1, k) == b) {
+    if (w.getBlockId(i, j - 1, k) == b.blockID) {
       r.setRenderBounds(0.25F, 0.0F, 0.25F, 0.75F, 0.25F, 0.75F);
       ((BlockFrame) b).setSides(false, false, true, true, true, true);
     } else {
@@ -53,7 +53,7 @@
       ((BlockFrame) b).setSides(true, false, false, false, false, false);
     }
     r.renderStandardBlock(b, i, j, k);
-    if (w.getBlock(i, j + 1, k) == b) {
+    if (w.getBlockId(i, j + 1, k) == b.blockID) {
       r.setRenderBounds(0.25F, 0.75F, 0.25F, 0.75F, 1.0F, 0.75F);
       ((BlockFrame) b).setSides(false, false, true, true, true, true);
     } else {
@@ -61,7 +61,7 @@
       ((BlockFrame) b).setSides(false, true, false, false, false, false);
     }
     r.renderStandardBlock(b, i, j, k);
-    if (w.getBlock(i, j, k - 1) == b) {
+    if (w.getBlockId(i, j, k - 1) == b.blockID) {
       r.setRenderBounds(0.25F, 0.25F, 0.0F, 0.75F, 0.75F, 0.25F);
       ((BlockFrame) b).setSides(true, true, false, false, true, true);
     } else {
@@ -69,7 +69,7 @@
       ((BlockFrame) b).setSides(false, false, true, false, false, false);
     }
     r.renderStandardBlock(b, i, j, k);
-    if (w.getBlock(i, j, k + 1) == b) {
+    if (w.getBlockId(i, j, k + 1) == b.blockID) {
       r.setRenderBounds(0.25F, 0.25F, 0.75F, 0.75F, 0.75F, 1.0F);
       ((BlockFrame) b).setSides(true, true, false, false, true, true);
     } else {
--- a/com/yogpc/qp/client/RenderRefinery.java
+++ b/com/yogpc/qp/client/RenderRefinery.java
@@ -24,7 +24,6 @@
 import net.minecraft.client.renderer.Tessellator;
 import net.minecraft.client.renderer.texture.TextureMap;
 import net.minecraft.client.renderer.tileentity.TileEntitySpecialRenderer;
-import net.minecraft.block.Block;
 import net.minecraft.tileentity.TileEntity;
 import net.minecraft.util.Icon;
 import net.minecraft.util.ResourceLocation;
@@ -204,8 +203,8 @@
     diplayLists = new int[100];
     Block baseBlock;
     Icon texture;
-    if (fluid.getBlock() != null) {
-      baseBlock = fluid.getBlock();
+    if (fluid.getBlockID() > -1) {
+      baseBlock = Block.blocksList[fluid.getBlockID()];
       texture = fluid.getStillIcon();
     } else {
       baseBlock = Block.waterStill;
