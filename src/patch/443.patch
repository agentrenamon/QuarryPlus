--- a/com/yogpc/ip/ItemArmorElectric.java
+++ b/com/yogpc/ip/ItemArmorElectric.java
@@ -30,7 +30,7 @@
 import cpw.mods.fml.common.asm.SideOnly;
 
 public class ItemArmorElectric extends ItemArmor implements ISpecialArmor, IElectricItem,
-    IArmorTextureProvider {
+    IArmorTextureProvider, ITickHandler {
   public ItemArmorElectric(final int id) {
     super(id, EnumHelper.addArmorMaterial("ELECTRIC", 33, new int[] {3, 8, 6, 3}, 0), YogpstopLib.proxy
         .addNewArmourRendererPrefix("electric"), 1);
@@ -38,6 +40,8 @@
     setMaxDamage(100);
     setMaxStackSize(1);
     this.iconIndex = 83;
+    TickRegistry.registerTickHandler(this, Side.CLIENT);
+    TickRegistry.registerTickHandler(this, Side.SERVER);
   }
 
   @Override
@@ -122,13 +126,28 @@
   }
 
   @Override
-  public void onArmorTickUpdate(final World world, final EntityPlayer player, final ItemStack itemStack) {
-    if (player.inventory.armorInventory[2] != itemStack)
+  public void tickStart(final EnumSet<TickType> type, final Object... tickData) {
+    final EntityPlayer player = (EntityPlayer) tickData[0];
+    final ItemStack itemStack = player.inventory.armorInventory[2];
+    if (this != itemStack.getItem())
       return;
     useJetpack(player, itemStack, toggleHover(player, itemStack));
   }
 
   @Override
+  public void tickEnd(final EnumSet<TickType> type, final Object... tickData) {}
+
+  @Override
+  public EnumSet<TickType> ticks() {
+    return EnumSet.of(TickType.PLAYER);
+  }
+
+  @Override
+  public String getLabel() {
+    return "JetPack";
+  }
+
+  @Override
   @SideOnly(Side.CLIENT)
   public EnumRarity getRarity(final ItemStack stack) {
     return EnumRarity.uncommon;
--- a/com/yogpc/mc_lib/APowerTile.java
+++ b/com/yogpc/mc_lib/APowerTile.java
@@ -94,7 +94,7 @@
 
   @Override
   public boolean demandsEnergy() {
-    return (int) (Math.min(this.maxGot - this.got, this.max - this.all - this.got) * 2.5);
+    return (Math.min(this.maxGot - this.got, this.max - this.all - this.got) * 2.5) > 0;
   }
 
   @Override
@@ -103,11 +103,6 @@
   }
 
   @Override
-  public int getMaxSafeInput() {
-    return 3;
-  }
-
-  @Override
   public boolean isAddedToEnergyNet() {
     return true;
   }
--- a/com/yogpc/qp/client/RenderRefinery.java
+++ b/com/yogpc/qp/client/RenderRefinery.java
@@ -177,7 +177,7 @@
           GL11.glPushMatrix();
           GL11.glTranslatef(tx, ty, tz);
         }
-        bindTextureByName(Block.blocksList[liquid.shiftedIndex].getTextureFile());
+        bindTextureByName(Block.blocksList[liquid.itemID].getTextureFile());
         final ItemStack stack = liquid.asItemStack();
         setColor(stack.getItem().getColorFromItemStack(stack, 0));
         GL11.glCallList(list[(int) (liquid.amount / buf * 99)]);
@@ -196,8 +196,8 @@
       return diplayLists;
     diplayLists = new int[100];
     Block baseBlock;
-    if (fluidStack.shiftedIndex > -1) {
-      baseBlock = Block.blocksList[fluidStack.shiftedIndex];
+    if (fluidStack.itemID > -1) {
+      baseBlock = Block.blocksList[fluidStack.itemID];
     } else {
       baseBlock = Block.waterStill;
     }
