--- a/com/yogpc/mc_lib/ProxyClient.java
+++ b/com/yogpc/mc_lib/ProxyClient.java
@@ -5,7 +5,6 @@
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.gui.GuiScreen;
 import net.minecraft.client.multiplayer.WorldClient;
-import net.minecraft.client.settings.GameSettings;
 import net.minecraft.client.settings.KeyBinding;
 import net.minecraft.entity.Entity;
 import net.minecraft.world.World;
@@ -54,18 +53,18 @@
 		if ((currentScreen == null) || (currentScreen.allowUserInput)) {
 			for (Key k : Key.values()) {
 				if (k.binding instanceof KeyBinding) {
-					if (GameSettings.isKeyDown((KeyBinding) k.binding)) {
+					if (((KeyBinding) k.binding).pressed) {
 						this.key |= 1 << k.ordinal();
 					}
 				} else {
 					switch (k) {
 					case forward:
-						if (GameSettings.isKeyDown(Minecraft.getMinecraft().gameSettings.keyBindForward)) {
+						if (Minecraft.getMinecraft().gameSettings.keyBindForward.pressed) {
 							this.key |= 1 << k.ordinal();
 						}
 						break;
 					case jump:
-						if (GameSettings.isKeyDown(Minecraft.getMinecraft().gameSettings.keyBindJump)) {
+						if (Minecraft.getMinecraft().gameSettings.keyBindJump.pressed) {
 							this.key |= 1 << k.ordinal();
 						}
 						break;
--- a/com/yogpc/qp/APowerTile.java
+++ b/com/yogpc/qp/APowerTile.java
@@ -3,7 +3,6 @@
 import com.yogpc.mc_lib.APacketTile;
 
 import net.minecraft.nbt.NBTTagCompound;
-import net.minecraftforge.common.ForgeDirection;
 import buildcraft.api.power.IPowerReceptor;
 import buildcraft.api.power.IPowerProvider;
 import buildcraft.api.power.PowerFramework;
--- a/com/yogpc/qp/BlockBreaker.java
+++ b/com/yogpc/qp/BlockBreaker.java
@@ -21,6 +21,7 @@
 import java.util.ArrayList;
 import java.util.Random;
 
+import buildcraft.core.proxy.CoreProxy;
 import cpw.mods.fml.relauncher.Side;
 import cpw.mods.fml.relauncher.SideOnly;
 import net.minecraft.block.Block;
@@ -50,6 +51,10 @@
 		this.setHardness(3.5F);
 		this.setStepSound(soundStoneFootstep);
 		this.setBlockName("BreakerPlus");
+		this.blockIndexInTexture = 96;
+		this.furnaceTopIcon = 97;
+		this.horizontal = 100;
+		this.vectrial = 101;
 	}
 
 	@Override
@@ -74,11 +79,8 @@
 
 	@Override
 	@SideOnly(Side.CLIENT)
-	public void registerIcons(IconRegister par1IconRegister) {
-		this.blockIndexInTexture = par1IconRegister.registerIcon("yogpstop_qp:plusstone_side");
-		this.furnaceTopIcon = par1IconRegister.registerIcon("yogpstop_qp:plusstone_top");
-		this.horizontal = par1IconRegister.registerIcon("yogpstop_qp:breaker_front_horizontal");
-		this.vectrial = par1IconRegister.registerIcon("yogpstop_qp:breaker_front_vertical");
+	public String getTextureFile() {
+		return "/mods/yogpstop_qp/textures/textures.png";
 	}
 
 	@Override
@@ -139,8 +141,8 @@
 
 	@Override
 	public void onBlockPlacedBy(World world, int x, int y, int z, EntityLiving ent) {
-		EnchantmentHelper.init((IEnchantableTile) world.getBlockTileEntity(x, y, z), is.getEnchantmentTagList());
-		world.setBlockMetadataWithNotify(x, y, z, BlockPistonBase.determineOrientation(world, x, y, z, ent), 2);
+		EnchantmentHelper.init((IEnchantableTile) world.getBlockTileEntity(x, y, z), ent.getHeldItem().getEnchantmentTagList());
+		world.setBlockMetadataWithNotify(x, y, z, BlockPistonBase.determineOrientation(world, x, y, z, (EntityPlayer) ent));
 	}
 
 	static void setDispenserDefaultDirection(World w, int x, int y, int z) {
--- a/com/yogpc/qp/BlockFrame.java
+++ b/com/yogpc/qp/BlockFrame.java
@@ -23,12 +23,12 @@
 		setSides(true, true, true, true, true, true);
 		setHardness(0.5F);
 		setTickRandomly(true);
+		this.blockIndexInTexture = 34;
 	}
 
 	@Override
-	@SideOnly(Side.CLIENT)
-	public void registerIcons(IconRegister ir) {
-		this.blockIndexInTexture = ir.registerIcon("buildcraft:blockFrame");// TODO buildcraft resource
+	public String getTextureFile() {
+		return "/gfx/buildcraft/blocks/blocks.png";// TODO buildcraft resource
 	}
 
 	@Override
--- a/com/yogpc/qp/BlockInfMJSrc.java
+++ b/com/yogpc/qp/BlockInfMJSrc.java
@@ -17,13 +17,12 @@
 
 package com.yogpc.qp;
 
+import net.minecraft.block.Block;
 import net.minecraft.block.BlockContainer;
 import net.minecraft.block.material.Material;
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.tileentity.TileEntity;
 import net.minecraft.world.World;
-import cpw.mods.fml.relauncher.SideOnly;
-import cpw.mods.fml.relauncher.Side;
 
 public class BlockInfMJSrc extends BlockContainer {
 
@@ -34,12 +33,7 @@
 		setStepSound(soundStoneFootstep);
 		setCreativeTab(QuarryPlus.ct);
 		setBlockName("InfMJSrc");
-	}
-
-	@Override
-	@SideOnly(Side.CLIENT)
-	public void registerIcons(IconRegister ir) {
-		this.blockIndexInTexture = ir.registerIcon("portal");
+		this.blockIndexInTexture=Block.portal.blockIndexInTexture;
 	}
 
 	@Override
--- a/com/yogpc/qp/BlockLaser.java
+++ b/com/yogpc/qp/BlockLaser.java
@@ -41,6 +41,9 @@
 		setHardness(10F);
 		setCreativeTab(QuarryPlus.ct);
 		this.setBlockName("LaserPlus");
+		this.blockIndexInTexture = 112;
+		this.textureBottom = 113;
+		this.textureTop = 114;
 	}
 
 	@Override
@@ -80,15 +83,13 @@
 
 	@Override
 	@SideOnly(Side.CLIENT)
-	public void registerIcons(IconRegister par1IconRegister) {
-		this.textureTop = par1IconRegister.registerIcon("yogpstop_qp:laser_top");
-		this.textureBottom = par1IconRegister.registerIcon("yogpstop_qp:laser_bottom");
-		this.blockIndexInTexture = par1IconRegister.registerIcon("yogpstop_qp:laser_side");
+	public String getTextureFile() {
+		return "/mods/yogpstop_qp/textures/textures.png";
 	}
 
 	@Override
 	public void onBlockPlacedBy(World world, int x, int y, int z, EntityLiving ent) {
-		EnchantmentHelper.init((IEnchantableTile) world.getBlockTileEntity(x, y, z), is.getEnchantmentTagList());
+		EnchantmentHelper.init((IEnchantableTile) world.getBlockTileEntity(x, y, z), ent.getHeldItem().getEnchantmentTagList());
 	}
 
 	private final ArrayList<ItemStack> drop = new ArrayList<ItemStack>();
--- a/com/yogpc/qp/BlockMarker.java
+++ b/com/yogpc/qp/BlockMarker.java
@@ -31,12 +31,16 @@
 import net.minecraftforge.common.ForgeDirection;
 
 public class BlockMarker extends BlockContainer {
+	private static final ForgeDirection[] m2fd = new ForgeDirection[] { ForgeDirection.DOWN, ForgeDirection.EAST, ForgeDirection.WEST, ForgeDirection.SOUTH,
+			ForgeDirection.NORTH, ForgeDirection.UP };
+	private static final byte[] s2m = new byte[] { 0, 5, 4, 3, 2, 1 };
 
 	public BlockMarker(int id) {
 		super(id, Material.circuits);
 		setLightValue(0.5F);
 		setCreativeTab(QuarryPlus.ct);
 		setBlockName("MarkerPlus");
+		this.blockIndexInTexture = 16;
 	}
 
 	@Override
@@ -48,7 +52,7 @@
 	public void setBlockBoundsBasedOnState(IBlockAccess world, int x, int y, int z) {
 		float w = 0.15F;
 		float h = 0.65F;
-		ForgeDirection dir = ForgeDirection.getOrientation(world.getBlockMetadata(x, y, z));
+		ForgeDirection dir = m2fd[world.getBlockMetadata(x, y, z)];
 		switch (dir) {
 		case DOWN:
 			this.setBlockBounds(0.5F - w, 1F - h, 0.5F - w, 0.5F + w, 1F, 0.5F + w);
@@ -88,13 +92,13 @@
 
 	@Override
 	public boolean canPlaceBlockOnSide(World world, int x, int y, int z, int side) {
-		ForgeDirection dir = ForgeDirection.getOrientation(side);
+		ForgeDirection dir = m2fd[side];
 		return world.isBlockSolidOnSide(x - dir.offsetX, y - dir.offsetY, z - dir.offsetZ, dir.getOpposite());
 	}
 
 	@Override
 	public int onBlockPlaced(World world, int x, int y, int z, int side, float par6, float par7, float par8, int meta) {
-		return side;
+		return s2m[side];
 	}
 
 	@Override
@@ -105,7 +109,7 @@
 
 	private void dropTorchIfCantStay(World w, int x, int y, int z) {
 		int m = w.getBlockMetadata(x, y, z);
-		if (!canPlaceBlockOnSide(w, x, y, z, m)) {
+		if (!canPlaceBlockOnSide(w, x, y, z, m2fd[m].ordinal())) {
 			dropBlockAsItem(w, x, y, z, m, 0);
 			w.setBlock(x, y, z, 0);
 		}
@@ -146,7 +150,7 @@
 
 	@Override
 	@SideOnly(Side.CLIENT)
-	public void registerIcons(IconRegister par1IconRegister) {
-		this.blockIndexInTexture = par1IconRegister.registerIcon("yogpstop_qp:marker");
+	public String getTextureFile() {
+		return "/mods/yogpstop_qp/textures/textures.png";
 	}
 }
--- a/com/yogpc/qp/BlockMiningWell.java
+++ b/com/yogpc/qp/BlockMiningWell.java
@@ -42,6 +42,11 @@
 		setCreativeTab(QuarryPlus.ct);
 		setStepSound(soundStoneFootstep);
 		setBlockName("MiningWellPlus");
+		this.blockIndexInTexture = 48;
+		this.textureFront = 49;
+		this.textureBack = 50;
+		this.textureTop = 51;
+		this.texW = 52;
 	}
 
 	@Override
@@ -51,12 +56,8 @@
 
 	@Override
 	@SideOnly(Side.CLIENT)
-	public void registerIcons(IconRegister par1IconRegister) {
-		this.textureFront = par1IconRegister.registerIcon("yogpstop_qp:miningwell_front");
-		this.blockIndexInTexture = par1IconRegister.registerIcon("yogpstop_qp:miningwell");
-		this.textureBack = par1IconRegister.registerIcon("yogpstop_qp:miningwell_back");
-		this.textureTop = par1IconRegister.registerIcon("yogpstop_qp:miningwell_top");
-		this.texW = par1IconRegister.registerIcon("yogpstop_qp:miningwell_top_w");
+	public String getTextureFile() {
+		return "/mods/yogpstop_qp/textures/textures.png";
 	}
 
 	@Override
@@ -82,8 +83,8 @@
 	public void onBlockPlacedBy(World w, int x, int y, int z, EntityLiving el) {
 		super.onBlockPlacedBy(w, x, y, z, el);
 		ForgeDirection orientation = get2dOrientation(el.posX, el.posZ, x, z);
-		w.setBlockMetadataWithNotify(x, y, z, orientation.getOpposite().ordinal(), 1);
-		EnchantmentHelper.init((IEnchantableTile) w.getBlockTileEntity(x, y, z), is.getEnchantmentTagList());
+		w.setBlockMetadataWithNotify(x, y, z, orientation.getOpposite().ordinal());
+		EnchantmentHelper.init((IEnchantableTile) w.getBlockTileEntity(x, y, z), el.getHeldItem().getEnchantmentTagList());
 	}
 
 	private static ForgeDirection get2dOrientation(double x1, double z1, double x2, double z2) {
--- a/com/yogpc/qp/BlockMover.java
+++ b/com/yogpc/qp/BlockMover.java
@@ -32,6 +32,9 @@
 		setHardness(1.2F);
 		this.setCreativeTab(QuarryPlus.ct);
 		setBlockName("EnchantMover");
+		this.blockIndexInTexture = 32;
+		this.textureBottom = 33;
+		this.textureTop = 34;
 	}
 
 	@Override
@@ -50,10 +53,8 @@
 
 	@SideOnly(Side.CLIENT)
 	@Override
-	public void registerIcons(IconRegister par1IconRegister) {
-		this.blockIndexInTexture = par1IconRegister.registerIcon("yogpstop_qp:mover");
-		this.textureTop = par1IconRegister.registerIcon("yogpstop_qp:mover_top");
-		this.textureBottom = par1IconRegister.registerIcon("yogpstop_qp:mover_bottom");
+	public String getTextureFile() {
+		return "/mods/yogpstop_qp/textures/textures.png";
 	}
 
 	@Override
--- a/com/yogpc/qp/BlockPlacer.java
+++ b/com/yogpc/qp/BlockPlacer.java
@@ -19,6 +19,7 @@
 
 import java.util.Random;
 
+import buildcraft.core.proxy.CoreProxy;
 import cpw.mods.fml.relauncher.Side;
 import cpw.mods.fml.relauncher.SideOnly;
 import net.minecraft.block.Block;
@@ -50,6 +51,10 @@
 		this.setHardness(3.5F);
 		this.setStepSound(soundStoneFootstep);
 		this.setBlockName("PlacerPlus");
+		this.blockIndexInTexture = 96;
+		this.furnaceTopIcon = 97;
+		this.horizontal = 98;
+		this.vectrial = 99;
 	}
 
 	@Override
@@ -74,11 +79,8 @@
 
 	@Override
 	@SideOnly(Side.CLIENT)
-	public void registerIcons(IconRegister par1IconRegister) {
-		this.blockIndexInTexture = par1IconRegister.registerIcon("yogpstop_qp:plusstone_side");
-		this.furnaceTopIcon = par1IconRegister.registerIcon("yogpstop_qp:plusstone_top");
-		this.horizontal = par1IconRegister.registerIcon("yogpstop_qp:placer_front_horizontal");
-		this.vectrial = par1IconRegister.registerIcon("yogpstop_qp:placer_front_vertical");
+	public String getTextureFile() {
+		return "/mods/yogpstop_qp/textures/textures.png";
 	}
 
 	@Override
@@ -157,7 +159,7 @@
 
 	@Override
 	public void onBlockPlacedBy(World par1World, int par2, int par3, int par4, EntityLiving par5EntityLiving) {
-		int l = BlockPistonBase.determineOrientation(par1World, par2, par3, par4, par5EntityLiving);
+		int l = BlockPistonBase.determineOrientation(par1World, par2, par3, par4, (EntityPlayer) par5EntityLiving);
 		par1World.setBlockMetadataWithNotify(par2, par3, par4, l);
 	}
 
@@ -197,7 +199,6 @@
 				}
 			}
 
-			world.func_96440_m(x, y, z, b);
 		}
 
 		super.breakBlock(world, x, y, z, b, meta);
--- a/com/yogpc/qp/BlockPlainPipe.java
+++ b/com/yogpc/qp/BlockPlainPipe.java
@@ -5,8 +5,6 @@
 import net.minecraft.block.Block;
 import net.minecraft.block.material.Material;
 import net.minecraft.item.Item;
-import cpw.mods.fml.relauncher.SideOnly;
-import cpw.mods.fml.relauncher.Side;
 
 public class BlockPlainPipe extends Block {
 	public BlockPlainPipe(int id) {
@@ -17,12 +15,12 @@
 		this.maxX = 0.75;
 		this.maxY = 1.0;
 		this.maxZ = 0.75;
+		this.blockIndexInTexture = 32;
 	}
 
 	@Override
-	@SideOnly(Side.CLIENT)
-	public void registerIcons(IconRegister ir) {
-		this.blockIndexInTexture = ir.registerIcon("buildcraft:blockPlainPipe");// TODO buildcraft resource
+	public String getTextureFile() {
+		return "/gfx/buildcraft/blocks/blocks.png";// TODO buildcraft resource
 	}
 
 	@Override
--- a/com/yogpc/qp/BlockPump.java
+++ b/com/yogpc/qp/BlockPump.java
@@ -40,6 +40,11 @@
 		setHardness(5F);
 		setCreativeTab(QuarryPlus.ct);
 		setBlockName("PumpPlus");
+		this.textureSide = 64;
+		this.textureBottom = 65;
+		this.textureTop = 66;
+		this.texC = 67;
+		this.texW = 68;
 	}
 
 	@Override
@@ -73,12 +78,8 @@
 
 	@Override
 	@SideOnly(Side.CLIENT)
-	public void registerIcons(IconRegister par1IconRegister) {
-		this.textureTop = par1IconRegister.registerIcon("yogpstop_qp:pump_top");
-		this.textureBottom = par1IconRegister.registerIcon("yogpstop_qp:pump_bottom");
-		this.textureSide = par1IconRegister.registerIcon("yogpstop_qp:pump_side");
-		this.texW = par1IconRegister.registerIcon("yogpstop_qp:pump_top_w");
-		this.texC = par1IconRegister.registerIcon("yogpstop_qp:pump_top_c");
+	public String getTextureFile() {
+		return "/mods/yogpstop_qp/textures/textures.png";
 	}
 
 	private final ArrayList<ItemStack> drop = new ArrayList<ItemStack>();
@@ -108,7 +109,7 @@
 	@Override
 	public void onBlockPlacedBy(World w, int x, int y, int z, EntityLiving el) {
 		super.onBlockPlacedBy(w, x, y, z, el);
-		EnchantmentHelper.init((IEnchantableTile) w.getBlockTileEntity(x, y, z), is.getEnchantmentTagList());
+		EnchantmentHelper.init((IEnchantableTile) w.getBlockTileEntity(x, y, z), el.getHeldItem().getEnchantmentTagList());
 	}
 
 	@Override
--- a/com/yogpc/qp/BlockQuarry.java
+++ b/com/yogpc/qp/BlockQuarry.java
@@ -42,6 +42,12 @@
 		setStepSound(soundStoneFootstep);
 		setCreativeTab(QuarryPlus.ct);
 		setBlockName("QuarryPlus");
+		this.blockIndexInTexture = 0;
+		this.textureFront = 1;
+		this.textureTop = 2;
+		this.texNNB = 3;
+		this.texMF = 4;
+		this.texBB = 5;
 	}
 
 	private final ArrayList<ItemStack> drop = new ArrayList<ItemStack>();
@@ -105,13 +111,8 @@
 
 	@Override
 	@SideOnly(Side.CLIENT)
-	public void registerIcons(IconRegister par1IconRegister) {
-		this.blockIndexInTexture = par1IconRegister.registerIcon("yogpstop_qp:quarry");
-		this.textureTop = par1IconRegister.registerIcon("yogpstop_qp:quarry_top");
-		this.textureFront = par1IconRegister.registerIcon("yogpstop_qp:quarry_front");
-		this.texBB = par1IconRegister.registerIcon("yogpstop_qp:quarry_top_bb");
-		this.texNNB = par1IconRegister.registerIcon("yogpstop_qp:quarry_top_nnb");
-		this.texMF = par1IconRegister.registerIcon("yogpstop_qp:quarry_top_mf");
+	public String getTextureFile() {
+		return "/mods/yogpstop_qp/textures/textures.png";
 	}
 
 	@Override
@@ -123,9 +124,9 @@
 	public void onBlockPlacedBy(World w, int x, int y, int z, EntityLiving el) {
 		super.onBlockPlacedBy(w, x, y, z, el);
 		ForgeDirection orientation = get2dOrientation(el.posX, el.posZ, x, z);
-		w.setBlockMetadataWithNotify(x, y, z, orientation.getOpposite().ordinal(), 1);
+		w.setBlockMetadataWithNotify(x, y, z, orientation.getOpposite().ordinal());
 		((TileQuarry) w.getBlockTileEntity(x, y, z)).requestTicket();
-		EnchantmentHelper.init((IEnchantableTile) w.getBlockTileEntity(x, y, z), is.getEnchantmentTagList());
+		EnchantmentHelper.init((IEnchantableTile) w.getBlockTileEntity(x, y, z), el.getHeldItem().getEnchantmentTagList());
 	}
 
 	private static ForgeDirection get2dOrientation(double x1, double z1, double x2, double z2) {
--- a/com/yogpc/qp/BlockRefinery.java
+++ b/com/yogpc/qp/BlockRefinery.java
@@ -32,8 +32,6 @@
 import net.minecraftforge.liquids.LiquidContainerRegistry;
 import net.minecraftforge.liquids.LiquidStack;
 import net.minecraftforge.liquids.ITankContainer;
-import cpw.mods.fml.relauncher.SideOnly;
-import cpw.mods.fml.relauncher.Side;
 
 public class BlockRefinery extends BlockContainer {
 
@@ -45,12 +43,6 @@
 	}
 
 	@Override
-	@SideOnly(Side.CLIENT)
-	public void registerIcons(IconRegister ir) {
-		this.blockIndexInTexture = ir.registerIcon("buildcraft:refineryBack");// TODO buildcraft resource
-	}
-
-	@Override
 	public TileEntity createNewTileEntity(World w) {
 		return new TileRefinery();
 	}
@@ -82,10 +74,10 @@
 	@Override
 	public void onBlockPlacedBy(World w, int x, int y, int z, EntityLiving el) {
 		super.onBlockPlacedBy(w, x, y, z, el);
-		EnchantmentHelper.init((IEnchantableTile) w.getBlockTileEntity(x, y, z), is.getEnchantmentTagList());
+		EnchantmentHelper.init((IEnchantableTile) w.getBlockTileEntity(x, y, z), el.getHeldItem().getEnchantmentTagList());
 		ForgeDirection[] da = { ForgeDirection.NORTH, ForgeDirection.EAST, ForgeDirection.SOUTH, ForgeDirection.WEST };
 		int di = MathHelper.floor_double((el.rotationYaw + 45.0) / 90.0) & 3;
-		w.setBlockMetadataWithNotify(x, y, z, da[di].ordinal(), 1);
+		w.setBlockMetadataWithNotify(x, y, z, da[di].ordinal());
 	}
 
 	private static void consumeItem(EntityPlayer ep, ItemStack stack) {
@@ -123,17 +115,17 @@
 			int meta = world.getBlockMetadata(x, y, z);
 			switch (ForgeDirection.values()[meta]) {
 			case WEST:
-				world.setBlockMetadataWithNotify(x, y, z, ForgeDirection.SOUTH.ordinal(), 3);
+				world.setBlockMetadataWithNotify(x, y, z, ForgeDirection.SOUTH.ordinal());
 				break;
 			case EAST:
-				world.setBlockMetadataWithNotify(x, y, z, ForgeDirection.NORTH.ordinal(), 3);
+				world.setBlockMetadataWithNotify(x, y, z, ForgeDirection.NORTH.ordinal());
 				break;
 			case NORTH:
-				world.setBlockMetadataWithNotify(x, y, z, ForgeDirection.WEST.ordinal(), 3);
+				world.setBlockMetadataWithNotify(x, y, z, ForgeDirection.WEST.ordinal());
 				break;
 			case SOUTH:
 			default:
-				world.setBlockMetadataWithNotify(x, y, z, ForgeDirection.EAST.ordinal(), 3);
+				world.setBlockMetadataWithNotify(x, y, z, ForgeDirection.EAST.ordinal());
 				break;
 			}
 			return true;
--- a/com/yogpc/qp/ItemTool.java
+++ b/com/yogpc/qp/ItemTool.java
@@ -32,7 +32,6 @@
 import net.minecraft.nbt.NBTTagCompound;
 import net.minecraft.nbt.NBTTagList;
 import net.minecraft.world.World;
-import net.minecraftforge.oredict.OreDictionary;
 
 public class ItemTool extends Item implements IEnchantableItem {
 	int ile, ils;
@@ -43,6 +42,9 @@
 		setHasSubtypes(true);
 		this.setMaxDamage(0);
 		setCreativeTab(QuarryPlus.ct);
+		this.iconIndex = 80;
+		this.ile = 81;
+		this.ils = 82;
 	}
 
 	@Override
@@ -143,10 +145,8 @@
 
 	@Override
 	@SideOnly(Side.CLIENT)
-	public void registerIcons(IconRegister ir) {
-		this.iconIndex = ir.registerIcon("yogpstop_qp:statusChecker");
-		this.ile = ir.registerIcon("yogpstop_qp:listEditor");
-		this.ils = ir.registerIcon("yogpstop_qp:liquidSelector");
+	public String getTextureFile() {
+		return "/mods/yogpstop_qp/textures/textures.png";
 	}
 
 	@Override
--- a/com/yogpc/qp/PowerManager.java
+++ b/com/yogpc/qp/PowerManager.java
@@ -36,7 +36,7 @@
 		if (c.containsKey(name)) {
 			Property prop = c.get(name);
 			if (prop.getType() == null) {
-				prop = new Property(prop.getName(), prop.getString(), Property.Type.DOUBLE);
+				prop = new Property(prop.getName(), prop.value, Property.Type.DOUBLE);
 				c.put(name, prop);
 			}
 			return prop.getDouble(def);
--- a/com/yogpc/qp/QuarryPlus.java
+++ b/com/yogpc/qp/QuarryPlus.java
@@ -20,7 +20,6 @@
 import java.lang.reflect.Field;
 
 import com.yogpc.mc_lib.PacketHandler;
-import com.yogpc.qp.client.RenderEntityLaser;
 
 import buildcraft.BuildCraftBuilders;
 import buildcraft.BuildCraftCore;
@@ -33,13 +32,11 @@
 import net.minecraft.creativetab.CreativeTabs;
 import net.minecraft.item.Item;
 import net.minecraft.item.ItemStack;
-import net.minecraftforge.client.event.TextureStitchEvent;
 import net.minecraftforge.common.Configuration;
 import net.minecraftforge.common.ForgeChunkManager;
 import net.minecraftforge.common.MinecraftForge;
 import net.minecraftforge.common.Property;
 import net.minecraftforge.event.world.WorldEvent;
-import net.minecraftforge.oredict.OreDictionary;
 import cpw.mods.fml.client.registry.RenderingRegistry;
 import cpw.mods.fml.common.SidedProxy;
 import cpw.mods.fml.common.Mod;
@@ -49,8 +46,6 @@
 import cpw.mods.fml.common.registry.GameRegistry;
 import cpw.mods.fml.common.registry.LanguageRegistry;
 import cpw.mods.fml.common.network.NetworkRegistry;
-import cpw.mods.fml.relauncher.Side;
-import cpw.mods.fml.relauncher.SideOnly;
 
 @Mod(modid = "QuarryPlus", name = "QuarryPlus", version = "@VERSION@", dependencies = "required-after:YogpstopLib;required-after:BuildCraft|Builders;required-after:BuildCraft|Core;required-after:BuildCraft|Energy;required-after:BuildCraft|Factory;required-after:BuildCraft|Silicon;required-after:BuildCraft|Transport")
 public class QuarryPlus {
@@ -94,19 +89,6 @@
 			if (l.w == event.world) l.destructor();
 	}
 
-	@ForgeSubscribe
-	@SideOnly(Side.CLIENT)
-	public void loadTextures(TextureStitchEvent.Pre evt) {
-		if (evt.map.textureType == 0) {
-			TextureMap map = evt.map;
-			RenderEntityLaser.icons = new int[4];
-			RenderEntityLaser.icons[EntityLaser.DRILL] = map.registerIcon("buildcraft:blockDrillTexture");// TODO buildcraft resource
-			RenderEntityLaser.icons[EntityLaser.DRILL_HEAD] = map.registerIcon("buildcraft:blockDrillHeadTexture");// TODO buildcraft resource
-			RenderEntityLaser.icons[EntityLaser.RED_LASER] = map.registerIcon("buildcraft:blockRedLaser");// TODO buildcraft resource
-			RenderEntityLaser.icons[EntityLaser.BLUE_LASER] = map.registerIcon("buildcraft:blockBlueLaser");// TODO buildcraft resource
-		}
-	}
-
 	@Mod.PreInit
 	public void preInit(FMLPreInitializationEvent event) {
 		Configuration cfg = new Configuration(event.getSuggestedConfigurationFile());
@@ -152,7 +134,9 @@
 		} catch (Exception e) {
 			e.printStackTrace();
 		}
-		LanguageRegistry.instance().loadLocalization("/lang/yogpstop/quarryplus/en_US.lang", "en_US", false);// TODO language deprecated
+		LanguageRegistry.instance().loadLocalization("/lang/yogpstop/quarryplus/en_US.lang", "en_US", false);// TODO
+																												// language
+																												// deprecated
 		LanguageRegistry.instance().loadLocalization("/lang/yogpstop/quarryplus/ja_JP.lang", "ja_JP", false);
 		LanguageRegistry.instance().loadLocalization("/lang/yogpstop/quarryplus/ru_RU.lang", "ru_RU", false);
 		ForgeChunkManager.setForcedChunkLoadingCallback(instance, new ChunkLoadingHandler());
@@ -241,8 +225,8 @@
 					new ItemStack(Item.bucketWater, 1), new ItemStack(Item.bucketLava, 1));
 			addAssemblyRecipe(80000, new ItemStack(blockMiningWell, 1), new ItemStack(BuildCraftFactory.miningWellBlock, 1), new ItemStack(redstoneChipset, 1,
 					3), new ItemStack(BuildCraftTransport.yellowPipeWire, 8));
-			addAssemblyRecipe(40000, new ItemStack(blockBreaker, 1), new ItemStack(Block.dispenser, 1), new ItemStack(Item.pickaxeDiamond, 1),
-					new ItemStack(BuildCraftEnergy.engineBlock, 1, 1));
+			addAssemblyRecipe(40000, new ItemStack(blockBreaker, 1), new ItemStack(Block.dispenser, 1), new ItemStack(Item.pickaxeDiamond, 1), new ItemStack(
+					BuildCraftEnergy.engineBlock, 1, 1));
 			addAssemblyRecipe(80000, new ItemStack(blockPlacer, 1), new ItemStack(Block.dispenser, 1), new ItemStack(BuildCraftBuilders.fillerBlock, 1),
 					new ItemStack(BuildCraftEnergy.engineBlock, 1, 1));
 			addAssemblyRecipe(160000, new ItemStack(blockLaser, 1), new ItemStack(BuildCraftSilicon.laserBlock, 1), new ItemStack(
@@ -250,8 +234,7 @@
 			break;
 		case 3:
 			addAssemblyRecipe(800000, new ItemStack(blockQuarry, 1), new ItemStack(BuildCraftFactory.quarryBlock, 2), new ItemStack(redstoneChipset, 8, 3),
-					new ItemStack(BuildCraftTransport.yellowPipeWire, 16), new ItemStack(redstoneChipset, 2, 4), new ItemStack(
-							Block.chest, 32));
+					new ItemStack(BuildCraftTransport.yellowPipeWire, 16), new ItemStack(redstoneChipset, 2, 4), new ItemStack(Block.chest, 32));
 			addAssemblyRecipe(640000, new ItemStack(blockMover, 1), new ItemStack(Block.enchantmentTable, 1), new ItemStack(
 					BuildCraftSilicon.assemblyTableBlock, 1, 1), new ItemStack(Block.anvil, 2), new ItemStack(BuildCraftSilicon.laserBlock, 4), new ItemStack(
 					BuildCraftSilicon.assemblyTableBlock, 1), new ItemStack(redstoneChipset, 4, 3), new ItemStack(BuildCraftCore.diamondGearItem, 2));
@@ -272,21 +255,18 @@
 					new ItemStack(Item.bucketWater, 1), new ItemStack(Item.bucketLava, 1), new ItemStack(BuildCraftEnergy.bucketOil, 1), new ItemStack(
 							BuildCraftEnergy.bucketFuel, 1), new ItemStack(BuildCraftEnergy.engineBlock, 1, 2));
 			addAssemblyRecipe(500000, new ItemStack(blockMiningWell, 1), new ItemStack(BuildCraftFactory.miningWellBlock, 2), new ItemStack(redstoneChipset, 8,
-					3), new ItemStack(BuildCraftTransport.yellowPipeWire, 16), new ItemStack(redstoneChipset, 1, 4), new ItemStack(
-					Block.chest, 16));
-			addAssemblyRecipe(640000, new ItemStack(blockBreaker, 1), new ItemStack(Block.dispenser, 2), new ItemStack(Block.blockDiamond, 2),
-					new ItemStack(Item.redstone, 64), new ItemStack(blockQuarry, 1), new ItemStack(blockMiningWell, 1), new ItemStack(
-							BuildCraftEnergy.engineBlock, 16, 2));
-			addAssemblyRecipe(1280000, new ItemStack(blockPlacer, 1), new ItemStack(Block.dispenser, 2), new ItemStack(Block.blockDiamond, 2),
-					new ItemStack(Item.redstone, 64), new ItemStack(BuildCraftBuilders.fillerBlock, 2), new ItemStack(Block.blockGold, 2), new ItemStack(
-							BuildCraftEnergy.engineBlock, 16, 2));
+					3), new ItemStack(BuildCraftTransport.yellowPipeWire, 16), new ItemStack(redstoneChipset, 1, 4), new ItemStack(Block.chest, 16));
+			addAssemblyRecipe(640000, new ItemStack(blockBreaker, 1), new ItemStack(Block.dispenser, 2), new ItemStack(Block.blockDiamond, 2), new ItemStack(
+					Item.redstone, 64), new ItemStack(blockQuarry, 1), new ItemStack(blockMiningWell, 1), new ItemStack(BuildCraftEnergy.engineBlock, 16, 2));
+			addAssemblyRecipe(1280000, new ItemStack(blockPlacer, 1), new ItemStack(Block.dispenser, 2), new ItemStack(Block.blockDiamond, 2), new ItemStack(
+					Item.redstone, 64), new ItemStack(BuildCraftBuilders.fillerBlock, 2), new ItemStack(Block.blockGold, 2), new ItemStack(
+					BuildCraftEnergy.engineBlock, 16, 2));
 			addAssemblyRecipe(7654321, new ItemStack(blockLaser, 1), new ItemStack(BuildCraftSilicon.laserBlock, 16), new ItemStack(Block.glass, 64),
 					new ItemStack(BuildCraftTransport.pipePowerGold, 64), new ItemStack(Item.lightStoneDust, 64), new ItemStack(Block.obsidian, 16));
 			break;
 		default:
 			addAssemblyRecipe(320000, new ItemStack(blockQuarry, 1), new ItemStack(BuildCraftFactory.quarryBlock, 1), new ItemStack(redstoneChipset, 2, 3),
-					new ItemStack(BuildCraftTransport.yellowPipeWire, 16), new ItemStack(redstoneChipset, 1, 4), new ItemStack(
-							Block.chest, 8));
+					new ItemStack(BuildCraftTransport.yellowPipeWire, 16), new ItemStack(redstoneChipset, 1, 4), new ItemStack(Block.chest, 8));
 			addAssemblyRecipe(320000, new ItemStack(blockMover, 1), new ItemStack(Block.enchantmentTable, 1), new ItemStack(
 					BuildCraftSilicon.assemblyTableBlock, 1, 1), new ItemStack(Block.anvil, 1), new ItemStack(BuildCraftSilicon.assemblyTableBlock, 1),
 					new ItemStack(redstoneChipset, 4, 3), new ItemStack(BuildCraftSilicon.laserBlock, 4));
@@ -306,10 +286,9 @@
 					new ItemStack(Item.bucketWater, 1), new ItemStack(Item.bucketLava, 1), new ItemStack(BuildCraftEnergy.bucketOil, 1), new ItemStack(
 							BuildCraftEnergy.bucketFuel, 1));
 			addAssemblyRecipe(160000, new ItemStack(blockMiningWell, 1), new ItemStack(BuildCraftFactory.miningWellBlock, 1), new ItemStack(redstoneChipset, 2,
-					3), new ItemStack(BuildCraftTransport.yellowPipeWire, 16), new ItemStack(redstoneChipset, 1, 4), new ItemStack(
-					Block.chest, 8));
-			addAssemblyRecipe(320000, new ItemStack(blockBreaker, 1), new ItemStack(Block.dispenser, 2), new ItemStack(Block.blockDiamond, 1),
-					new ItemStack(Item.redstone, 32), new ItemStack(blockQuarry, 1), new ItemStack(BuildCraftEnergy.engineBlock, 1, 2));
+					3), new ItemStack(BuildCraftTransport.yellowPipeWire, 16), new ItemStack(redstoneChipset, 1, 4), new ItemStack(Block.chest, 8));
+			addAssemblyRecipe(320000, new ItemStack(blockBreaker, 1), new ItemStack(Block.dispenser, 2), new ItemStack(Block.blockDiamond, 1), new ItemStack(
+					Item.redstone, 32), new ItemStack(blockQuarry, 1), new ItemStack(BuildCraftEnergy.engineBlock, 1, 2));
 			addAssemblyRecipe(640000, new ItemStack(blockPlacer, 1), new ItemStack(Block.dispenser, 2), new ItemStack(Block.blockDiamond, 1), new ItemStack(
 					Item.redstone, 32), new ItemStack(BuildCraftBuilders.fillerBlock, 1), new ItemStack(Block.blockGold, 2), new ItemStack(
 					BuildCraftEnergy.engineBlock, 1, 2));
@@ -320,6 +299,8 @@
 		proxy.registerTextures();
 		PacketHandler.registerStaticHandler(TileMarker.class);
 	}
+	
+	public static final int WILDCARD_VALUE = 32767;
 
 	public static class BlockData {
 		public final String name;
--- a/com/yogpc/qp/TileBasic.java
+++ b/com/yogpc/qp/TileBasic.java
@@ -177,7 +177,10 @@
 			iii = ii;
 		}
 		if (iii instanceof ISidedInventory) {
-			a = ((ISidedInventory) iii).getAccessibleSlotsFromSide(fd.ordinal());
+			a = new int[((ISidedInventory) iii).getSizeInventorySide(fd)];
+			int from = ((ISidedInventory) iii).getStartInventorySide(fd);
+			for (int i = 0; i < a.length; i++)
+				a[i] = from + i;
 		} else {
 			a = new int[iii.getSizeInventory()];
 			for (int i = 0; i < a.length; i++)
@@ -186,11 +189,6 @@
 		int moved = 0, buf;
 		for (int i : a) {
 			ItemStack is2 = iii.getStackInSlot(i);
-			if (iii instanceof ISidedInventory) {
-				if (!((ISidedInventory) iii).canInsertItem(i, is2, fd.ordinal())) continue;
-			} else {
-				if (!iii.isStackValidForSlot(i, is2)) continue;
-			}
 			if (is2 == null) continue;
 			if (!is2.isItemEqual(is1)) continue;
 			if (!ItemStack.areItemStackTagsEqual(is2, is1)) continue;
@@ -304,7 +302,7 @@
 	private static void readLongCollection(NBTTagList nbttl, Collection<BlockData> target) {
 		target.clear();
 		for (int i = 0; i < nbttl.tagCount(); i++) {
-			NBTTagCompound c =((NBTTagCompound) nbttl.tagAt(i));
+			NBTTagCompound c = ((NBTTagCompound) nbttl.tagAt(i));
 			target.add(new BlockData(c.getString("name"), c.getInteger("meta")));
 		}
 	}
@@ -395,11 +393,6 @@
 	}
 
 	@Override
-	public boolean isInvNameLocalized() {
-		return false;
-	}
-
-	@Override
 	public int getInventoryStackLimit() {
 		return 0;
 	}
@@ -417,9 +410,4 @@
 
 	@Override
 	public void closeChest() {}
-
-	@Override
-	public boolean isStackValidForSlot(int p_94041_1_, ItemStack p_94041_2_) {
-		return false;
-	}
 }
--- a/com/yogpc/qp/TileBreaker.java
+++ b/com/yogpc/qp/TileBreaker.java
@@ -99,11 +99,6 @@
 	}
 
 	@Override
-	public boolean isInvNameLocalized() {
-		return false;
-	}
-
-	@Override
 	public int getInventoryStackLimit() {
 		return 0;
 	}
@@ -121,9 +116,4 @@
 
 	@Override
 	public void closeChest() {}
-
-	@Override
-	public boolean isStackValidForSlot(int p_94041_1_, ItemStack p_94041_2_) {
-		return false;
-	}
 }
--- a/com/yogpc/qp/TilePlacer.java
+++ b/com/yogpc/qp/TilePlacer.java
@@ -85,11 +85,6 @@
 	}
 
 	@Override
-	public boolean isInvNameLocalized() {
-		return false;
-	}
-
-	@Override
 	public int getInventoryStackLimit() {
 		return 64;
 	}
@@ -107,11 +102,6 @@
 	public void closeChest() {}
 
 	@Override
-	public boolean isStackValidForSlot(int i, ItemStack itemstack) {
-		return true;
-	}
-
-	@Override
 	public void readFromNBT(NBTTagCompound par1NBTTagCompound) {
 		super.readFromNBT(par1NBTTagCompound);
 		NBTTagList nbttaglist = par1NBTTagCompound.getTagList("Items");
--- a/com/yogpc/qp/TilePump.java
+++ b/com/yogpc/qp/TilePump.java
@@ -21,6 +21,7 @@
 import java.io.DataOutputStream;
 import java.util.Collection;
 import java.util.LinkedList;
+import java.util.Map.Entry;
 
 import com.google.common.io.ByteArrayDataInput;
 import com.google.common.io.ByteStreams;
@@ -134,7 +135,7 @@
 			te = this.worldObj.getBlockTileEntity(this.xCoord + fd.offsetX, this.yCoord + fd.offsetY, this.zCoord + fd.offsetZ);
 			if (te instanceof ITankContainer) {
 				for (String s : this.mapping[fd.ordinal()]) {
-					pZ = this.liquids.indexOf(LiquidDictionary.getCanonicalLiquid(s));
+					pZ = indexOf(LiquidDictionary.getLiquid(s, 0));
 					if (pZ == -1) continue;
 					fs = this.liquids.get(pZ);
 					fs.amount -= ((ITankContainer) te).fill(fd.getOpposite(), fs, true);
@@ -485,7 +486,7 @@
 		if (this.liquids.size() > 0) {
 			ret[0] = StatCollector.translateToLocal("chat.pumpcontain");
 			for (int i = 0; i < this.liquids.size(); i++) {
-				ret[i + 1] = new StringBuilder().append("    ").append(LiquidDictionary.findLiquidName(this.liquids.get(i))).append(": ")
+				ret[i + 1] = new StringBuilder().append("    ").append(findLiquidName(this.liquids.get(i))).append(": ")
 						.append(this.liquids.get(i).amount).append("mB").toString();
 			}
 		} else {
@@ -525,7 +526,7 @@
 
 	public LiquidStack drain(ForgeDirection fd, LiquidStack resource, boolean doDrain) {
 		if (resource == null) return null;
-		int index = this.liquids.indexOf(resource);
+		int index = indexOf(resource);
 		if (index == -1) return null;
 		LiquidStack fs = this.liquids.get(index);
 		if (fs == null) return null;
@@ -558,9 +559,9 @@
 			int index;
 			LiquidStack fs;
 			for (String s : this.mapping[fd.ordinal()]) {
-				fs = LiquidDictionary.getCanonicalLiquid(s);
+				fs = LiquidDictionary.getLiquid(s, 0);
 				if (fs == null) continue;
-				index = this.liquids.indexOf(fs);
+				index = indexOf(fs);
 				if (index != -1) ret.add(new LiquidTank(this.liquids.get(index), Integer.MAX_VALUE));
 				else ret.add(new LiquidTank(fs, Integer.MAX_VALUE));
 			}
@@ -590,7 +591,7 @@
 		for (String s : this.mapping[fd.ordinal()]) {
 			fs = LiquidDictionary.getLiquid(s, maxDrain);
 			if (fs == null) continue;
-			index = this.liquids.indexOf(fs);
+			index = indexOf(fs);
 			if (index == -1) continue;
 			return drain(fd, this.liquids.get(index), doDrain);
 		}
@@ -630,7 +631,7 @@
 				fs = new LiquidStack(Block.lavaStill, LiquidContainerRegistry.BUCKET_VOLUME);
 			}
 			if (fs != null) {
-				int index = this.liquids.indexOf(fs);
+				int index = indexOf(fs);
 				if (index != -1) this.liquids.get(index).amount += fs.amount;
 				else this.liquids.add(fs);
 				fs = null;
@@ -685,4 +686,16 @@
 		TileBasic tb = G_connected();
 		return tb == null ? 0 : tb.powerRequest();
 	}
+
+	private static String findLiquidName(LiquidStack fs) {
+		for (Entry<String, LiquidStack> entry : LiquidDictionary.getLiquids().entrySet())
+			if (fs.isLiquidEqual(entry.getValue())) return entry.getKey();
+		return null;
+	}
+
+	private int indexOf(LiquidStack key) {
+		for (int i = 0; i < this.liquids.size(); i++)
+			if (this.liquids.get(i).isLiquidEqual(key)) return i;
+		return -1;
+	}
 }
--- a/com/yogpc/qp/client/ClientProxy.java
+++ b/com/yogpc/qp/client/ClientProxy.java
@@ -23,6 +23,7 @@
 import com.yogpc.qp.TileQuarry;
 import com.yogpc.qp.TileRefinery;
 
+import net.minecraftforge.client.MinecraftForgeClient;
 import cpw.mods.fml.client.registry.ClientRegistry;
 import cpw.mods.fml.client.registry.RenderingRegistry;
 import cpw.mods.fml.relauncher.SideOnly;
@@ -40,5 +41,7 @@
 		RenderingRegistry.registerBlockHandler(RenderLaserBlock.INSTANCE);
 		RenderingRegistry.registerBlockHandler(RenderMarker.INSTANCE);
 		RenderingRegistry.registerBlockHandler(RenderFrame.INSTANCE);
+		MinecraftForgeClient.preloadTexture("/mods/yogpstop_qp/textures/textures.png");
+		MinecraftForgeClient.preloadTexture("/mods/yogpstop_qp/textures/textures.png");
 	}
 }
--- a/com/yogpc/qp/client/GuiError.java
+++ b/com/yogpc/qp/client/GuiError.java
@@ -19,35 +19,36 @@
 
 import cpw.mods.fml.relauncher.SideOnly;
 import cpw.mods.fml.relauncher.Side;
-import net.minecraft.client.Minecraft;
 import net.minecraft.client.gui.GuiButton;
-import net.minecraft.client.gui.GuiErrorScreen;
 import net.minecraft.client.gui.GuiScreen;
+import net.minecraft.client.gui.GuiSmallButton;
+import net.minecraft.util.StatCollector;
 
 @SideOnly(Side.CLIENT)
-public class GuiError extends GuiErrorScreen {
-	private GuiScreen parent;
+public class GuiError extends GuiScreenA {
+	private String message1, message2;
 
 	public GuiError(GuiScreen par1GuiScreen, String par2Str, String par3Str) {
-		super(par2Str, par3Str);
-		this.parent = par1GuiScreen;
+		super(par1GuiScreen);
+		this.message1 = par2Str;
+		this.message2 = par3Str;
 	}
 
 	@Override
 	protected void actionPerformed(GuiButton par1GuiButton) {
-		Minecraft.getMinecraft().displayGuiScreen(this.parent);
+		showParent();
 	}
 
 	@Override
-	public boolean doesGuiPauseGame() {
-		return false;
+	public void initGui() {
+		this.controlList.add(new GuiSmallButton(0, this.width / 2 - 75, this.height / 6 + 96, StatCollector.translateToLocal("gui.done")));
 	}
 
 	@Override
-	public void updateScreen() {
-		super.updateScreen();
-		if (!this.mc.thePlayer.isEntityAlive() || this.mc.thePlayer.isDead) {
-			this.mc.thePlayer.closeScreen();
-		}
+	public void drawScreen(int par1, int par2, float par3) {
+		this.drawDefaultBackground();
+		this.drawCenteredString(this.fontRenderer, this.message1, this.width / 2, 70, 0xFFFFFF);
+		this.drawCenteredString(this.fontRenderer, this.message2, this.width / 2, 90, 0xFFFFFF);
+		super.drawScreen(par1, par2, par3);
 	}
 }
--- a/com/yogpc/qp/client/GuiInfMJSrc.java
+++ b/com/yogpc/qp/client/GuiInfMJSrc.java
@@ -107,7 +107,7 @@
 	public void drawScreen(int i, int j, float k) {
 		drawDefaultBackground();
 		GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
-		this.mc.renderEngine.bindTexture(gui);
+		this.mc.renderEngine.bindTexture(this.mc.renderEngine.getTexture(gui));
 		int xb = this.width - 176 >> 1;
 		int yb = this.height - 214 >> 1;
 		drawTexturedModalRect(xb, yb, 0, 0, 176, 214);
--- a/com/yogpc/qp/client/GuiMover.java
+++ b/com/yogpc/qp/client/GuiMover.java
@@ -61,7 +61,7 @@
 	@Override
 	protected void drawGuiContainerBackgroundLayer(float f, int i, int j) {
 		GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
-		this.mc.renderEngine.bindTexture(gui);
+		this.mc.renderEngine.bindTexture(this.mc.renderEngine.getTexture(gui));
 		int l = this.width - this.xSize >> 1;
 		int i1 = this.height - this.ySize >> 1;
 		drawTexturedModalRect(l, i1, 0, 0, this.xSize, this.ySize);
--- a/com/yogpc/qp/client/GuiPlacer.java
+++ b/com/yogpc/qp/client/GuiPlacer.java
@@ -41,7 +41,7 @@
 
 	@Override
 	protected void drawGuiContainerForegroundLayer(int par1, int par2) {
-		String s = this.tile.isInvNameLocalized() ? this.tile.getInvName() : StatCollector.translateToLocal(this.tile.getInvName());
+		String s = StatCollector.translateToLocal(this.tile.getInvName());
 		this.fontRenderer.drawString(s, this.xSize / 2 - this.fontRenderer.getStringWidth(s) / 2, 6, 4210752);
 		this.fontRenderer.drawString(StatCollector.translateToLocal("container.inventory"), 8, this.ySize - 96 + 2, 4210752);
 	}
@@ -49,7 +49,7 @@
 	@Override
 	protected void drawGuiContainerBackgroundLayer(float par1, int par2, int par3) {
 		GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
-		this.mc.renderEngine.bindTexture(tex);
+		this.mc.renderEngine.bindTexture(this.mc.renderEngine.getTexture(tex));
 		int k = (this.width - this.xSize) / 2;
 		int l = (this.height - this.ySize) / 2;
 		this.drawTexturedModalRect(k, l, 0, 0, this.xSize, this.ySize);
--- a/com/yogpc/qp/client/RenderEntityLaser.java
+++ b/com/yogpc/qp/client/RenderEntityLaser.java
@@ -40,10 +40,10 @@
 		doRender(tm, ed.posX, ed.posY, ed.posZ, ed.iSize, ed.jSize, ed.kSize, ed.texture);
 	}
 
-	private static void doRender(RenderEngine tm, double i, double j, double k, double iSize, double jSize, double kSize, int tex) {
+	private static void doRender(RenderEngine tm, double i, double j, double k, double iSize, double jSize, double kSize, int texture) {
 		GL11.glPushMatrix();
 		GL11.glTranslated(i, j, k);
-		tm.bindTexture("/terrain.png");
+		tm.bindTexture(tm.getTexture("/terrain.png"));
 		Tessellator t = Tessellator.instance;
 		RenderBlocks rb = new RenderBlocks();
 		for (int iBase = 0; iBase < iSize; ++iBase) {
@@ -54,8 +54,6 @@
 					double remainZ = kSize - kBase;
 					GL11.glPushMatrix();
 					GL11.glTranslatef(iBase, jBase, kBase);
-					int texture = icons[tex];
-					if (texture == null) texture = Block.sand.getBlockTextureFromSide(0);
 					t.startDrawingQuads();
 					rb.setRenderBounds(0, 0, 0, remainX > 1.0 ? 1.0 : remainX, remainY > 1.0 ? 1.0 : remainY, remainZ > 1.0 ? 1.0 : remainZ);
 					rb.renderBottomFace(Block.sand, 0, 0, 0, texture);
--- a/com/yogpc/qp/client/RenderLaser.java
+++ b/com/yogpc/qp/client/RenderLaser.java
@@ -35,7 +35,7 @@
 		double total = Math.sqrt(dx * dx + dy * dy + dz * dz);
 		GL11.glRotated(360 - (Math.atan2(dz, dx) * 180.0 / Math.PI + 180.0), 0, 1, 0);
 		GL11.glRotated(-Math.atan2(dy, Math.sqrt(total * total - dy * dy)) * 180.0 / Math.PI, 0, 0, 1);
-		tm.bindTexture(tex);
+		tm.bindTexture(tm.getTexture(tex));
 		int i = 0;
 		while (i <= total - 1) {
 			box[b].render(1F / 16);
--- a/com/yogpc/qp/client/RenderMarker.java
+++ b/com/yogpc/qp/client/RenderMarker.java
@@ -141,10 +141,10 @@
 		x += 0.5D;
 		z += 0.5D;
 
-		double minU = i.getInterpolatedU(7);
-		double minV = i.getInterpolatedV(7);
-		double maxU = i.getInterpolatedU(9);
-		double maxV = i.getInterpolatedV(9);
+		double minU = (((i & 0xF) << 4) + 7) / 256F;
+		double minV = ((i & 0xF0) + 7) / 256F;
+		double maxU = (((i & 0xF) << 4) + 9) / 256F;
+		double maxV = ((i & 0xF0) + 9) / 256F;
 
 		tessellator.setBrightness(block.getMixedBrightnessForBlock(iblockaccess, xCoord, yCoord, zCoord));
 
@@ -184,10 +184,10 @@
 
 		i = block.getBlockTexture(iblockaccess, xCoord, yCoord, zCoord, 0);
 
-		minU = i.getMinU();
-		maxU = i.getMaxU();
-		minV = i.getMinV();
-		maxV = i.getMaxV();
+		minU = ((i & 0xF) << 4) / 256F;
+		minV = (i & 0xF0) / 256F;
+		maxU = (((i & 0xF) << 4) + 0x10) / 256F;
+		maxV = ((i & 0xF0) + 0x10) / 256F;
 
 		if (m == 5 || m == 4 || m == 3 || m == 0) {
 			tessellator.addVertexWithUV(x + frontX[m][0][0], y + frontX[m][1][0], z + frontX[m][2][0], minU, minV);
--- a/com/yogpc/qp/client/RenderRefinery.java
+++ b/com/yogpc/qp/client/RenderRefinery.java
@@ -181,7 +181,7 @@
 					GL11.glPushMatrix();
 					GL11.glTranslatef(tx, ty, tz);
 				}
-				bindTextureByName(liquid.getTextureSheet());
+				bindTextureByName(Block.blocksList[liquid.itemID].getTextureFile());
 				ItemStack stack = liquid.asItemStack();
 				setColor(stack.getItem().getColorFromItemStack(stack, 0));
 				GL11.glCallList(list[(int) (liquid.amount / buf * 99)]);
@@ -198,13 +198,10 @@
 		if (diplayLists != null) return diplayLists;
 		diplayLists = new int[100];
 		Block baseBlock;
-		int texture;
 		if (fluidStack.itemID > -1) {
 			baseBlock = Block.blocksList[fluidStack.itemID];
-			texture = fluidStack.getRenderingIcon();
 		} else {
 			baseBlock = Block.waterStill;
-			texture = fluidStack.getRenderingIcon();
 		}
 		GL11.glDisable(GL11.GL_LIGHTING);
 		GL11.glDisable(GL11.GL_BLEND);
@@ -215,12 +212,12 @@
 			Tessellator tessellator = Tessellator.instance;
 			tessellator.startDrawingQuads();
 			renderBlocks.setRenderBounds(0.01, 0, 0.01, 0.99, (float) s / 100, 0.99);
-			renderBlocks.renderBottomFace(baseBlock, 0, 0, 0, texture != null ? texture : baseBlock.getBlockTextureFromSide(0));
-			renderBlocks.renderTopFace(baseBlock, 0, 0, 0, texture != null ? texture : baseBlock.getBlockTextureFromSide(1));
-			renderBlocks.renderEastFace(baseBlock, 0, 0, 0, texture != null ? texture : baseBlock.getBlockTextureFromSide(2));
-			renderBlocks.renderWestFace(baseBlock, 0, 0, 0, texture != null ? texture : baseBlock.getBlockTextureFromSide(3));
-			renderBlocks.renderNorthFace(baseBlock, 0, 0, 0, texture != null ? texture : baseBlock.getBlockTextureFromSide(4));
-			renderBlocks.renderSouthFace(baseBlock, 0, 0, 0, texture != null ? texture : baseBlock.getBlockTextureFromSide(5));
+			renderBlocks.renderBottomFace(baseBlock, 0, 0, 0, baseBlock.getBlockTextureFromSide(0));
+			renderBlocks.renderTopFace(baseBlock, 0, 0, 0, baseBlock.getBlockTextureFromSide(1));
+			renderBlocks.renderEastFace(baseBlock, 0, 0, 0, baseBlock.getBlockTextureFromSide(2));
+			renderBlocks.renderWestFace(baseBlock, 0, 0, 0, baseBlock.getBlockTextureFromSide(3));
+			renderBlocks.renderNorthFace(baseBlock, 0, 0, 0, baseBlock.getBlockTextureFromSide(4));
+			renderBlocks.renderSouthFace(baseBlock, 0, 0, 0, baseBlock.getBlockTextureFromSide(5));
 			tessellator.draw();
 			GL11.glEndList();
 		}
